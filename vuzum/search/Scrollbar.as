/**************************************** *  Scrollbar class (AS3)  *  email: office@vuzum.com	 *  2009 Vuzum Media, LLC. www.vuzum.com ***************************************/ package com.vuzum.search{	import flash.display.MovieClip;		import flash.events.Event;	import flash.events.MouseEvent;	import com.vuzum.utils.*;	import flash.geom.Rectangle;	import com.caurina.transitions.*;	import com.caurina.transitions.properties.*;		public class Scrollbar extends MovieClip	{				// COMPONENTS INSIDE		public var mcBackground : MovieClip;			public var mcScrub : MovieClip;			public var mcContent : MovieClip;		public var mcContentMask : MovieClip;		public var mcScrubBackground : MovieClip;				// VARIABLES		private var margin : Number = 5;		private var scrubPressed : Boolean = false;		private var outTransparency : Number = 0.8;		private var inactiveTransparency : Number = 0.1;		/*		 * SCROLLBAR CONSTRUCTOR		 */		public function Scrollbar()		{			// Prototypes						new Prototypes();			ColorShortcuts.init();			FilterShortcuts.init();						mcScrub.alpha = outTransparency;			mcScrubBackground.alpha = 0;		} 				/**		 * INITIALIZE THE SCROLLBAR		 */		public function init(mcList : MovieClip, mcMask : MovieClip, scrollBackgroundWidth : Number, scrollWidth : Number, scrollBackgroundColor : Number, scrollButtonColor : Number) : void		{			mcContent = mcList;			mcContentMask = mcMask;						mcBackground.setColor(scrollBackgroundColor);			mcBackground.width = scrollBackgroundWidth;			mcBackground.height = mcMask.height;						mcScrubBackground.alpha = 0;			mcScrubBackground.width = scrollWidth;			mcScrubBackground.x = Math.round((mcBackground.width - scrollWidth)/2);			mcScrubBackground.y = margin;			mcScrubBackground.height = mcMask.height - 2 * margin;						mcScrub.setColor(scrollButtonColor);			mcScrub.width = scrollWidth;			mcScrub.x = Math.round((mcBackground.width - scrollWidth)/2);			mcScrub.y = margin;			updateSlider();						mcScrub.buttonMode = true;			mcScrub.addEventListener(MouseEvent.MOUSE_DOWN, startDraging);			mcScrub.addEventListener(MouseEvent.MOUSE_UP, stopDraging);			mcScrub.addEventListener(MouseEvent.MOUSE_OVER, overScrub);			mcScrub.addEventListener(MouseEvent.MOUSE_OUT, outScrub);						mcScrubBackground.buttonMode = true;			mcScrubBackground.addEventListener(MouseEvent.MOUSE_UP, scrubBackgroundRelease);						stage.addEventListener(MouseEvent.MOUSE_UP, stageMouseUp);			stage.addEventListener(Event.MOUSE_LEAVE, releaseOutside);						stage.addEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheel);		}				/**		 * CALLS WHEN THE MOUSE WHEEL IS MOVED		 */	    public function onMouseWheel(event : MouseEvent) : void	    {	    	var delta : Number = event.delta;	    		    	var diff : Number;	    	diff = mcContent.height - mcContentMask.height;	    		    	var speed : Number = Math.floor(delta / 50 * diff);	    		    	if(mcContent.height > mcContentMask.height)			if(mcContentMask.hitTestPoint(stage.mouseX, stage.mouseY) || mcBackground.hitTestPoint(stage.mouseX, stage.mouseY))	    	{				var percentY : Number;				var gotoY : Number;						    	if (delta < 0)		    	{					if (mcScrub.y - speed > mcScrubBackground.y + mcScrubBackground.height - mcScrub.height) 					{						mcScrub.y = mcScrubBackground.y + mcScrubBackground.height - mcScrub.height;						Tweener.addTween(mcContent, {y : mcContentMask.y + mcContentMask.height - mcContent.height, time : 1, transition : "easeOutExpo"});					}			    	else		    		{		    			mcScrub.y -= speed;			    					    			//do scrolling						percentY = (mcScrub.y - mcBackground.y - margin)/(mcBackground.height - 2 * margin - mcScrub.height);						gotoY = Math.round(mcContentMask.y - percentY * (mcContent.height - mcContentMask.height));						Tweener.addTween(mcContent, {y : gotoY, time : 1, transition : "easeOutExpo"});		    		}    				    	}		    	else		    	{    				    		if (mcScrub.y - speed < mcScrubBackground.y) 		    		{		    			mcScrub.y = mcScrubBackground.y;		    			Tweener.addTween(mcContent, {y : mcContentMask.y, time : 1, transition : "easeOutExpo"});		    		}		    		else		    		{		    			mcScrub.y -= speed;		    					    			//do scrolling						percentY = (mcScrub.y - mcBackground.y - margin)/(mcBackground.height - 2 * margin - mcScrub.height);						gotoY = Math.round(mcContentMask.y - percentY * (mcContent.height - mcContentMask.height));						Tweener.addTween(mcContent, {y : gotoY, time : 1, transition : "easeOutExpo"});		    		}		    				    	}	    	}	    }				/**		 * RELEASE ONE SCRUB BACKGROUND TO SCROLL AT THAT POSITION		 */		private function scrubBackgroundRelease(event : MouseEvent) : void		{			if(this.mouseY < mcScrubBackground.y + mcScrub.height/2)			{				Tweener.addTween(mcScrub, {y : mcScrubBackground.y, time : 1, transition : "easeOutExpo"});				Tweener.addTween(mcContent, {y : mcContentMask.y, time : 1, transition : "easeOutExpo"});			}			else			{				if(this.mouseY > mcScrubBackground.y + mcScrubBackground.height - mcScrub.height/2)				{					Tweener.addTween(mcScrub, {y : mcScrubBackground.y + mcScrubBackground.height - mcScrub.height, time : 1, transition : "easeOutExpo"});					Tweener.addTween(mcContent, {y : mcContentMask.y + mcContentMask.height - mcContent.height, time : 1, transition : "easeOutExpo"});				}				else				{					Tweener.addTween(mcScrub, {y : this.mouseY - mcScrub.height/2, time : 1, transition : "easeOutExpo"});										//do scrolling					var percentY : Number = (this.mouseY - mcScrub.height/2 - mcBackground.y - margin)/(mcBackground.height - 2 * margin - mcScrub.height);					var gotoY : Number = Math.round(mcContentMask.y - percentY * (mcContent.height - mcContentMask.height));					Tweener.addTween(mcContent, {y : gotoY, time : 1, transition : "easeOutExpo"});				}			}		}				/**		 * OVER HANDLER		 */		private function overScrub(event : MouseEvent) : void		{			Tweener.addTween(mcScrub, {alpha : 1, time : 0.5, transition : "easeOutExpo"});		} 				/**		 * OUT HANDLER		 */		private function outScrub(event : MouseEvent) : void		{			if(scrubPressed == false)			{				Tweener.addTween(mcScrub, {alpha : outTransparency, time : 0.5, transition : "easeOutExpo"});			}		}				/**		 * RELEASE OUTSIDE HANDLER		 */		private function releaseOutside(event : Event) : void		{			scrubPressed = false;			mcScrub.stopDrag();			Tweener.addTween(mcScrub, {alpha : outTransparency, time : 0.5, transition : "easeOutExpo"});		}				/**		 * STAGE MOUSE UP		 */		private function stageMouseUp(event : MouseEvent) : void		{			scrubPressed = false;			mcScrub.stopDrag();			Tweener.addTween(mcScrub, {alpha : outTransparency, time : 0.5, transition : "easeOutExpo"});		}				/**		 * START DRAGGING		 */		private function startDraging(event : MouseEvent) : void		{			scrubPressed = true;						if(scrubPressed == true)			{				var mc : MovieClip = event.currentTarget as MovieClip;				var rectangle : Rectangle = new Rectangle(Math.round((mcBackground.width - mcScrub.width) / 2), margin, 0, mcBackground.height - 2 * margin - mcScrub.height);				mc.startDrag(false, rectangle);								stage.addEventListener(MouseEvent.MOUSE_MOVE, scrolling);			}		}				/**		 * STOP DRAGGING		 */		private function stopDraging(event : MouseEvent) : void		{			scrubPressed = false;			mcScrub.stopDrag();			stage.removeEventListener(MouseEvent.MOUSE_MOVE, scrolling);			Tweener.addTween(mcScrub, {alpha : 1, time : 0.5, transition : "easeOutExpo"});		}				/**		 * MOUSE MOVE EVENT		 */		private function scrolling(event : MouseEvent) : void		{			var percentY : Number = (mcScrub.y - mcBackground.y - margin)/(mcBackground.height - 2 * margin - mcScrub.height);			var gotoY : Number = Math.round(mcContentMask.y - percentY * (mcContent.height - mcContentMask.height));			Tweener.addTween(mcContent, {y : gotoY, time : 2, transition : "easeOutExpo"});		}				/**		 * UPDATE HEIGHT OF THE SLIDER		 */		public function updateSlider() : void		{			Tweener.addTween(mcScrub, {y : margin, time : 0.5, transition : "easeOutExpo"});			Tweener.addTween(mcContent, {y : mcContentMask.y, time : 0.5, transition : "easeOutExpo"});						mcScrub.buttonMode = false;						mcScrubBackground.buttonMode = false;			mcScrub.removeEventListener(MouseEvent.MOUSE_DOWN, startDraging);			mcScrub.removeEventListener(MouseEvent.MOUSE_UP, stopDraging);			mcScrub.removeEventListener(MouseEvent.MOUSE_OVER, overScrub);			mcScrub.removeEventListener(MouseEvent.MOUSE_OUT, outScrub);						mcScrubBackground.removeEventListener(MouseEvent.MOUSE_UP, scrubBackgroundRelease);			stage.removeEventListener(MouseEvent.MOUSE_UP, stageMouseUp);						if(mcContentMask.height > mcContent.height)			{				Tweener.addTween(mcScrub, {alpha : 0, time : 0.5, transition : "easeOutExpo", onComplete : function()				{					mcScrub.visible = false;					mcScrubBackground.visible = false;				}});				Tweener.addTween(mcBackground, {alpha : inactiveTransparency, time : 0.5, transition : "easeOutExpo"});			}			else			{				mcScrub.visible = true;				mcScrubBackground.visible = true;				Tweener.addTween(mcScrub, {alpha : outTransparency, time : 0.5, transition : "easeOutExpo"});				Tweener.addTween(mcBackground, {alpha : 1, time : 0.5, transition : "easeOutExpo"});				mcScrub.height = Math.round((mcBackground.height * mcContentMask.height) / mcContent.height);								mcScrub.buttonMode = true;				mcScrubBackground.buttonMode = true;				mcScrub.addEventListener(MouseEvent.MOUSE_DOWN, startDraging);				mcScrub.addEventListener(MouseEvent.MOUSE_UP, stopDraging);				mcScrub.addEventListener(MouseEvent.MOUSE_OVER, overScrub);				mcScrub.addEventListener(MouseEvent.MOUSE_OUT, outScrub);				mcScrubBackground.addEventListener(MouseEvent.MOUSE_UP, scrubBackgroundRelease);				stage.addEventListener(MouseEvent.MOUSE_UP, stageMouseUp);			}		}	}}