/*** SEARCH Product, April 2009* @author Vuzum Media, LLC.* @version 1; * http://www.vuzum.com* email: office@vuzum.com*/ package com.vuzum.search{	/*	 * FLASH IMPORTS	 */import com.kpm.kpm.DriverData;import com.kpm.kpm.KidLoginPage;import flash.display.DisplayObject;	import flash.display.Stage;	import flash.display.StageScaleMode;	import flash.display.StageAlign;	import flash.display.MovieClip;	import flash.events.Event;	import flash.utils.setTimeout;			/*	 * OTHER IMPORTS	 */	import com.caurina.transitions.*;	import com.caurina.transitions.properties.*;		/*	 * MY IMPORTS 	 */	import com.vuzum.utils.*;	/**	 * THE MAIN CLASS	 */	public class Search extends MovieClip 	{		/**		 * STATIC MEMBERS		 */		private static var instance : Search;		/**		 * COMPONENTS INSIDE		 */		public var mcLoader : MovieClip;		public var mcBack : MovieClip;		public var mcSearch : Header;		public var mcList : List;		public var mcScroll : MovieClip;		/**		 * INTERNAL MEMBERS		 */		// COMPONENT VARS		public var componentWidth : Number;		public var componentHeight : Number;		//		private var pathToFiles : String="";		//		private var xmlSettingsPath : String;		private var xmlContentPath : String;				// INTERNAL MEMBERS		// general variables		public var backgroundColor : Number;		public var contentMargin : Number;		// search back		public var searchBackgroundHeight : Number;		public var searchBackgroundColor : Number;		// serach text back		public var searchTextBackgroundColor : Number;		public var searchTextBackgroundHeight : Number;		// search title		public var searchTitleText : String = "SEARCH:";		public var searchTitleColor : Number;		public var searchTitleFontSize : Number = 20;		// search text		public var searchTextColor : Number;		public var searchTextFontSize : Number = 14;		// search button		public var searchIconBackgroundColor : Number;		public var searchIconColor : Number;		public var searchDeleteColor : Number;		public var searchOnlyOnButtonClick : Boolean;		// list variable		private var listArray : Array;		public var listItemHeight : Number = 90;		public var distanceBetweenListItems : Number = 15;		public var listItemVisibleCharacters : Number = 50;		//		public var listItemStrokeColor : Number;		public var listItemFillColor : Number;		//		public var listItemTitleFontSize : Number = 20;		public var listItemTitleColor : Number;		//		public var listItemTextFontSize : Number = 12;		public var listItemTextColor : Number;		//		public var listItemButtonBackgroundColor : Number;		public var listItemButtonBackgroundOverColor : Number;		public var listItemButtonTextColor : Number;		public var listItemButtonTextOverColor : Number;		public var listItemButtonTextFontSize : Number = 12;		//		public var listItemImageWidth : Number = 90;		public var listItemImageHeight : Number = 60;		// scroller		public var scrollBackgroundWidth : Number = 16;		public var scrollBackgroundColor : Number;		public var scrollOffset : Number = 4;		public var scrollButtonColor : Number;				/**		 * CONSTRUCTOR		 */		public function Search() 		{			// Prototypes						new Prototypes();						// INITS CLIPS INSIDE			//mcBack.visible = false;			mcSearch.visible = false;			mcList.visible = false;			// HIDE EVERYTHING			//show(false, true);		}				/**		 * INITIALIZE THE APPLICATION		 */		public function init(pComponentWidth : Number=NaN, pComponentHeight : Number=NaN, pPathToFiles : String="", pXmlSettingsPath : String="", pXmlContentPath : String="") : void		{			// HIDE EVERYTHING			show(false, true);									// component dimensions			componentWidth = pComponentWidth;			componentHeight = pComponentHeight;						// center the loader			mcLoader.centerOn(!isNaN(componentWidth) ? componentWidth : stage.stageWidth, !isNaN(componentHeight) ? componentHeight : stage.stageHeight);						// path to files			pathToFiles = Prototypes.readPathTo(pPathToFiles, pathToFiles);						// settings xml path			xmlSettingsPath = Prototypes.readAssetPath(pXmlSettingsPath, pathToFiles);						// content xml path			xmlContentPath = Prototypes.readAssetPath(pXmlContentPath, pathToFiles);						// load settings xml and start component			Prototypes.loadXML(xmlSettingsPath, onSettingsXMLLoaded, mcLoader, onXMLLoadingError);		}				/**		 * SETINGS XML LOADED COMPLETE EVENT LISTENER		 */		private function onSettingsXMLLoaded(settingsXML : XML) : void		{			// READ THE SETTINGS			// read the dimensions			if(isNaN(componentWidth)) componentWidth = Prototypes.readNumberVar(settingsXML.@width, stage.stageWidth);			if(isNaN(componentHeight)) componentHeight = Prototypes.readNumberVar(settingsXML.@height, stage.stageHeight); //trace(componentWidth, componentHeight);						// read settings variables			backgroundColor = Prototypes.readNumberVar(settingsXML.background.@color);			contentMargin = Prototypes.readNumberVar(settingsXML.background.@contentMargin); //trace(backgroundColor, contentMargin);						searchOnlyOnButtonClick = Prototypes.readBooleanVar(settingsXML.search.@searchOnlyOnButtonClick);			// search back			searchBackgroundHeight = Prototypes.readNumberVar(settingsXML.search.@backgroundHeight); //trace(searchBackgroundHeight);			searchBackgroundColor = Prototypes.readNumberVar(settingsXML.search.@backgroundColor); //trace(searchBackgroundColor);			// search text back			searchTextBackgroundHeight = Prototypes.readNumberVar(settingsXML.search.@textBackgroundHeight); //trace(searchBackgroundHeight);			searchTextBackgroundColor = Prototypes.readNumberVar(settingsXML.search.@textBackgroundColor); //trace(searchTextBackgroundColor);			// search title			searchTitleText = Prototypes.readStringVar(settingsXML.search, searchTitleText); //trace(searchTitleText);			searchTitleColor = Prototypes.readNumberVar(settingsXML.search.@titleColor); //trace(searchTitleColor);			searchTitleFontSize = Prototypes.readNumberVar(settingsXML.search.@titleFontSize, searchTitleFontSize); //trace(searchTitleFontSize);			// search text			searchTextColor = Prototypes.readNumberVar(settingsXML.search.@textColor); //trace(searchTextColor);			searchTextFontSize = Prototypes.readNumberVar(settingsXML.search.@textFontSize, searchTextFontSize); //trace(searchTextFontSize);			// search button			searchIconBackgroundColor = Prototypes.readNumberVar(settingsXML.search.@iconBackgroundColor); //trace(searchIconBackgroundColor);			searchIconColor = Prototypes.readNumberVar(settingsXML.search.@iconColor); //trace(searchIconColor);			searchDeleteColor = Prototypes.readNumberVar(settingsXML.search.@deleteBackgroundColor); //trace(searchDeleteColor);						// list			listItemHeight = Prototypes.readNumberVar(settingsXML.list.@itemHeight, listItemHeight); //trace(listItemHeight);			//			distanceBetweenListItems = Prototypes.readNumberVar(settingsXML.list.@distanceBetweenItems, distanceBetweenListItems); //trace(distanceBetweenListItems);			//			listItemVisibleCharacters = Prototypes.readNumberVar(settingsXML.list.@visibleTextCharacters, listItemVisibleCharacters); //trace(listItemVisibleCharacters);			//			listItemStrokeColor = Prototypes.readNumberVar(settingsXML.list.@itemStrokeColor); //trace(listItemStrokeColor);			listItemFillColor = Prototypes.readNumberVar(settingsXML.list.@itemFillColor); //trace(listItemFillColor);			//			listItemTitleFontSize = Prototypes.readNumberVar(settingsXML.list.@itemTitleFontSize, listItemTitleFontSize); //trace(listItemTitleFontSize);			listItemTitleColor = Prototypes.readNumberVar(settingsXML.list.@itemTitleColor); //trace(listItemTitleColor);			//			listItemTextFontSize = Prototypes.readNumberVar(settingsXML.list.@itemTextFontSize, listItemTextFontSize); //trace(listItemTextFontSize);			listItemTextColor = Prototypes.readNumberVar(settingsXML.list.@itemTextColor); //trace(listItemTextColor);			//			listItemButtonBackgroundColor = Prototypes.readNumberVar(settingsXML.list.@itemButtonBackgroundColor); //trace(listItemButtonBackgroundColor);			listItemButtonBackgroundOverColor = Prototypes.readNumberVar(settingsXML.list.@itemButtonBackgroundOverColor); //trace(listItemButtonBackgroundOverColor);			listItemButtonTextColor = Prototypes.readNumberVar(settingsXML.list.@itemButtonTextColor); //trace(listItemButtonTextColor);			listItemButtonTextOverColor = Prototypes.readNumberVar(settingsXML.list.@itemButtonOverTextColor); //trace(listItemButtonTextOverColor);			listItemButtonTextFontSize = Prototypes.readNumberVar(settingsXML.list.@itemButtonTextFontSize, listItemButtonTextFontSize); //trace(listItemButtonTextFontSize);			//			listItemImageWidth = Prototypes.readNumberVar(settingsXML.list.@itemImageWidth, listItemImageWidth); //trace(listItemImageWidth);			listItemImageHeight = Prototypes.readNumberVar(settingsXML.list.@itemImageHeight, listItemImageHeight); //trace(listItemImageHeight);						// scroller			scrollBackgroundWidth = Prototypes.readNumberVar(settingsXML.scroll.@backgroundWidth, scrollBackgroundWidth); //trace(scrollBackgroundWidth);			scrollBackgroundColor = Prototypes.readNumberVar(settingsXML.scroll.@backgroundColor); //trace(scrollBackgroundColor);			scrollOffset = Prototypes.readNumberVar(settingsXML.scroll.@offset, scrollOffset); //trace(scrollWidth);			scrollButtonColor = Prototypes.readNumberVar(settingsXML.scroll.@scrollerColor); //trace(scrollButtonColor);						// LOAD CONTENT XML			//Prototypes.loadXML(xmlContentPath, onXMLContentLoaded, mcLoader, onXMLLoadingError);            //ALTERNATE : get content from XML            //onXMLContentLoaded(KidLoginPage.searchContentsXML)		}				/*		 * CONTENT XML LOADED COMPLETE		 */		public function initializeList(contentXML : XML) : void		{			// READ THE LIST ITEMS			listArray = new Array();            if (contentXML != null)			if(Prototypes.readStringVar(contentXML.item) != "")			{				var itemsXMLList : XMLList = contentXML.item;				var itemsNo : Number = itemsXMLList.length();				var itemXML;							var itemObj : Object;				//				for(var i : uint = 0; i < itemsNo; i++)				{					itemXML = itemsXMLList[i];					itemObj = new Object();					//					itemObj.id = Prototypes.readStringVar(itemXML.@id);					//					itemObj.image = Prototypes.readAssetPath(itemXML.image, pathToFiles);					itemObj.imageLink = Prototypes.readStringVar(itemXML.image.@link);					itemObj.imageTarget = Prototypes.readStringVar(itemXML.image.@target, "_blank");					//									itemObj.title = Prototypes.readStringVar(itemXML.title);					itemObj.info = Prototypes.readStringVar(itemXML.info);					//					itemObj.buttonText = Prototypes.readStringVar(itemXML.moreButton);					itemObj.buttonLink = Prototypes.readStringVar(itemXML.moreButton.@link);					itemObj.buttonTarget = Prototypes.readStringVar(itemXML.moreButton.@target);					//					listArray.push(itemObj);				}			}						// CONFIG AND SHOW THE ELEMENTS INSIDE			// background			//mcBack.setColor(backgroundColor);			//mcBack.width = componentWidth;			//mcBack.height = componentHeight;			//mcBack.showObject();						// search header			//mcSearch.x = mcSearch.y = contentMargin;			mcSearch.init(mcList, componentWidth - 2 * mcSearch.x, searchBackgroundHeight, 							searchBackgroundColor, searchTextBackgroundColor, searchTextBackgroundHeight, 							searchTitleText, searchTitleColor, searchTitleFontSize, searchTextColor, 							searchTextFontSize, searchIconBackgroundColor, searchIconColor, contentMargin, 							listArray, searchDeleteColor, searchOnlyOnButtonClick);			MovieClip(mcSearch).showObject();						// list			//mcList.x = contentMargin;			//mcList.y = mcSearch.y + searchBackgroundHeight + contentMargin;			mcList.init(componentWidth - 2 * contentMargin, componentHeight - mcList.y - contentMargin, 						contentMargin, distanceBetweenListItems, listItemHeight, listItemVisibleCharacters, 						listArray, listItemStrokeColor, listItemFillColor, 						listItemTitleFontSize, listItemTitleColor, 						listItemTextFontSize, listItemTextColor, 						listItemButtonBackgroundColor, listItemButtonBackgroundOverColor, listItemButtonTextColor, listItemButtonTextOverColor, listItemButtonTextFontSize, 						listItemImageWidth, listItemImageHeight, 						scrollBackgroundWidth, scrollBackgroundColor, scrollOffset, scrollButtonColor);			MovieClip(mcList).showObject();		}		/*		 * XML LOAD ERROR handler		 */		private function onXMLLoadingError() : void		{					}						/****************************************		 * 		 * 				AUX VARS		 * 		 ****************************************/		public function show(flag : Boolean = true, loaderFlag : Boolean = false) : void		{            trace("Search.show" + flag);			mcLoader.visible = loaderFlag ? flag : !flag;			//			mcSearch.visible = flag;			mcList.visible = flag;			//mcBack.visible = flag;		}						// gets the scope of this class		public function get getScope() : Search		{            return this;        }					} // FROM CLASS} // FROM PACKAGE