/**************************************** *  List class (AS3)  *  email: office@vuzum.com	 *  2009 Vuzum Media, LLC. www.vuzum.com ***************************************/ package com.vuzum.search{	import com.zorked.URLNavigator;	// FLASH IMPORTS	import flash.text.TextFieldAutoSize;		import flash.text.TextFormat;	import flash.display.MovieClip;		import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import com.vuzum.utils.*;	import com.vuzum.utils.scroller.*;	import flash.display.Bitmap;	// OTHER IMPORTS	import com.caurina.transitions.*;	import com.caurina.transitions.properties.*;	public class List extends MovieClip	{		// COMPONTENTS INSIDE		public var mcMask : MovieClip;		public var mcAllItems : MovieClip;		public var mcScrollbar : ScrollBar;		public var mcBack : MovieClip;						// INTERNAL MEMBERS		// dimensions		public var componentWidth : Number;		public var componentHeight : Number;				// general settings		private var difference : Number;		private var itemHeight : Number;		private var margin : Number;		private var visibleCharacters : Number;						// list items		private var list : Array;		private var listMCS : Array;		private var infoArray : Array;		//		private var strokeColor : Number;		private var fillColor : Number;		//		private var titleSize : Number;		private var titleColor : Number;		//		private var textSize : Number;		private var textColor : Number;		//		private var buttonBackgroundColor : Number;		private var buttonBackgroundOverColor : Number;		private var buttonTextColor : Number;		private var buttonOverColor : Number;		private var buttonTextFontSize : Number;		//		private var imageWidth : Number;		private var imageHeight : Number;				private var imageMargin : Number = 10;				// scroller		private var scrollerWidth : Number;		private var scrollerBackgroundColor : Number;		private var scrollerBtWidth : Number;				private var scrollerButtonColor : Number;								// AUX VARIABLES		private var currentLoadingPath : String;		private var currentLoadingImage : Number;		private var updatedList : Array;		private var removedList : Array;						/**		 * CONSTRUCTOR		 */		public function List()		{			// Prototypes						new Prototypes();			ColorShortcuts.init();			FilterShortcuts.init();						list = new Array();			mcAllItems.mcItem.visible = false;		} 				/**		 * INITIALIZE THE LIST		 */		public function init(pComponentWidth : Number, pComponentHeight : Number,							 contentMargin : Number, distanceBetweenListItems : Number, listItemHeight : Number, listItemVisibleCharacters : Number,							 listArray : Array, listItemStrokeColor : Number, listItemFillColor : Number, 							 listItemTitleFontSize : Number, listItemTitleColor : Number, 							 listItemTextFontSize : Number, listItemTextColor : Number,  							 listItemButtonBackgroundColor : Number, listItemButtonBackgroundOverColor : Number, listItemButtonTextColor : Number, listItemButtonTextOverColor : Number, listItemButtonTextFontSize : Number,							 listItemImageWidth : Number, listItemImageHeight : Number, 							 scrollWidth : Number, scrollBackgroundColor : Number, scrollBtWidth : Number, scrollButtonColor : Number) : void		{			// component dimensions			mcBack.width = componentWidth = pComponentWidth;			mcBack.height = componentHeight = pComponentHeight;			mcBack.alpha = 0;			// back colors			strokeColor = listItemStrokeColor;			fillColor = listItemFillColor;			// general settings			margin = contentMargin;			difference = distanceBetweenListItems;			itemHeight = listItemHeight;			visibleCharacters = listItemVisibleCharacters;			// list			list = listArray;			//			titleColor = listItemTitleColor;			titleSize = listItemTitleFontSize;			//			textColor = listItemTextColor;			textSize = listItemTextFontSize;			// more button			buttonBackgroundColor = listItemButtonBackgroundColor;			buttonBackgroundOverColor = listItemButtonBackgroundOverColor;			buttonTextColor = listItemButtonTextColor;			buttonOverColor = listItemButtonTextOverColor;			buttonTextFontSize = listItemButtonTextFontSize;			//			imageWidth = listItemImageWidth;			imageHeight = listItemImageHeight;			//						scrollerWidth = scrollWidth;			scrollerBtWidth = scrollBtWidth;			scrollerBackgroundColor = scrollBackgroundColor;			scrollerButtonColor = scrollButtonColor;						// SETUP MASK			mcAllItems.mask = mcMask;			mcAllItems.cacheAsBitmap = true;			mcMask.alpha = 0.4;			//			mcMask.width = componentWidth - scrollerWidth - margin;			mcMask.height = componentHeight;									// SCROLL BAR			mcScrollbar.x = mcMask.x + mcMask.width + margin;			mcScrollbar.y = mcMask.y;			//mcScrollbar.init(mcAllItems, mcMask, scrollBackgroundWidth, scrollWidth, scrollBackgroundColor, scrollButtonColor);						//mcScrollbar.init(mcAllItems, mcMask, scrollerBtWidth, true, true, true, NaN, scrollBackgroundColor, scrollButtonColor, scrollButtonColor);			mcScrollbar.resize(scrollWidth, mcMask.height);									// CREATE THE LIST			createList(listArray);		}				/**		 * CREATE THE LIST		 */		private function createList(array : Array) : void		{			// CREATE THE LIST OF THUMBS			listMCS = new Array();			infoArray = array;			for(var i : uint = 0; i < array.length; i++)			{				var mc : MovieClip = mcAllItems.duplicateMovieClip(new mcListItem(), "mcItem" + i);				mc.index = i;				// BACKGROUND				mc.mcStrokeBackground.width = mcMask.width;				mc.mcStrokeBackground.height = itemHeight;				mc.mcFillBackground.width = Math.round(mc.mcStrokeBackground.width - 2);				mc.mcFillBackground.height = itemHeight - 2;								// IMAGE				mc.mcImageMask.x = imageMargin;				mc.mcImageMask.y = imageMargin;				mc.mcImageMask.width = imageWidth;				mc.mcImageMask.height = imageHeight;				//				mc.mcImage.mask = mc.mcImageMask;				mc.mcImage.x = mc.mcImageMask.x;				mc.mcImage.y = mc.mcImageMask.y;								//				mc.mcLoader.centerOnClip(mc.mcImageMask);				//				mc.mcLine.x = mc.mcImageMask.x + mc.mcImageMask.width + imageMargin;				mc.mcLine.height = itemHeight - 10;				// TITLE				mc.mcTitle.txt.textColor = titleColor;//				var titleFormat : TextFormat = new TextFormat();//				titleFormat.size = titleSize;//				mc.mcTitle.txt.defaultTextFormat = titleFormat;				mc.mcTitle.txt.initText("<font size = '" + titleSize + "'>" + array[i].title + "<font>");				mc.mcTitle.y = imageMargin;				mc.mcTitle.x = mc.mcLine.x + imageMargin;								// TEXT				mc.mcText.txt.textColor = textColor;//				var textFormat : TextFormat = new TextFormat();//				textFormat.size = textSize;//				mc.mcText.txt.defaultTextFormat = textFormat;				var tempText : String = String(array[i].info).length > visibleCharacters ? array[i].info.substring(0, visibleCharacters) + "..." : array[i].info;				mc.mcText.txt.initText("<font size = '" + textSize + "'>" + tempText + "<font>", true);				//mc.mcText.txt.border = true;				mc.mcText.x = mc.mcLine.x + imageMargin;				mc.mcText.y = Math.round(mc.mcTitle.y + mc.mcTitle.height - 5);				mc.mcText.txt.width = Math.round(mc.mcStrokeBackground.width - mc.mcText.x - margin);			 				// MORE BUTTON				// text				if(array[i].buttonText != "")				{					// text					mc.mcButton.mcText.txt.textColor = buttonTextColor;					mc.mcButton.mcText.txt.initText("<font size = '" + buttonTextFontSize + "'>" + array[i].buttonText + "<font>");					//mc.mcButton.mcText.x = Math.round((mc.mcButton.mcBackground.width - mc.mcButton.mcText.width)/2 - 1);					// background					mc.mcButton.mcBackground.setColor(buttonBackgroundColor);					mc.mcButton.mcBackground.width = mc.mcButton.mcText.width + 2 * mc.mcButton.mcText.x;					mc.mcButton.mcBackground.height = mc.mcButton.mcText.height + 2 * mc.mcButton.mcText.y;										// position					mc.mcButton.x = mc.mcStrokeBackground.width - mc.mcButton.width - 2 * imageMargin;					mc.mcButton.y = Math.round(mc.mcFillBackground.y +  mc.mcFillBackground.height - mc.mcButton.mcBackground.height);										// add events					if(array[i].buttonLink != "")					{						mc.mcButton.buttonMode = true;						mc.mcButton.mcText.txt.mouseEnabled = false;						mc.mcButton.addEventListener(MouseEvent.MOUSE_UP, releaseHandler);						mc.mcButton.addEventListener(MouseEvent.MOUSE_OVER, overHandler);						mc.mcButton.addEventListener(MouseEvent.MOUSE_OUT, outHandler);					}				}				else				{					//because just hiding it will cause problems in the display					mc.removeChild(mc.mcButton);					mc.mcButton = null;				}								// POSITION THE ITEM//				var numberlines : Number = (mc.mcText.txt.bottomScrollV	- mc.mcText.txt.scrollV) + 1; //				var maximumScroll : Number = mc.mcText.txt.maxScrollV;//				var totalLines : Number = numberlines + (maximumScroll - 1);				if(i == 0) mc.y = 0;				else mc.y = listMCS[i - 1].y + listMCS[i - 1].height + difference;								// ADD IT IN THE ARRAY				listMCS.push(mc);			}						// init the scroller depending on the list			mcScrollbar.init(mcAllItems, mcMask, scrollerBtWidth, true, true, true, NaN, scrollerBackgroundColor, scrollerButtonColor, scrollerButtonColor);						// start loading the images with the first one			loadImage(0);		}				/**		 * LOAD IMAGES		 */		public function loadImage(no : Number) : void		{			currentLoadingImage = no;						if(infoArray[no].image != "")			{				currentLoadingPath = infoArray[no].image;				// load image				listMCS[currentLoadingImage].mcImage.loadContent(infoArray[no].image, onImageLoaded, listMCS[currentLoadingImage].mcLoader);			}			else			{				var mc : MovieClip = listMCS[currentLoadingImage];				// increase text width				mc.mcText.x = mc.mcImage.x;				mc.mcText.txt.width = Math.round(mc.mcStrokeBackground.width - mc.mcText.x - margin);				mc.mcTitle.x = mc.mcImage.x;				mc.mcTitle.txt.width = Math.round(mc.mcStrokeBackground.width - mc.mcTitle.x - margin);				//remove image mc				mc.removeChild(mc.mcImage);				mc.mcImage = null;				mc.removeChild(mc.mcLoader);				mc.mcLoader = null;				//remove image separator				mc.removeChild(mc.mcLine);				mc.mcLine = null;								// load the next one				if(currentLoadingImage < list.length - 1)				{					currentLoadingImage++;					loadImage(currentLoadingImage);				}			}		}				/**		 * BULK LOADER COMPLETE EVENT		 */		private function onImageLoaded(mc : MovieClip=null) : void		{			// add events on this image			if(list[currentLoadingImage].imageLink != "")			{				mc.buttonMode = true;				mc.addEventListener(MouseEvent.MOUSE_UP, releaseHandler);			}						// load the next one			if(currentLoadingImage < list.length - 1)			{				currentLoadingImage++;				loadImage(currentLoadingImage);			}		}				/**		 * RELEASE HANDLER		 */		private function releaseHandler(event : MouseEvent) : void		{			var mc : MovieClip = event.currentTarget as MovieClip;			var mcParent : MovieClip = mc.parent as MovieClip;						// if is an image or a more button			if(mc.name == "mcImage" || mc.name == "mcButton")			{				var url : String = String(list[mcParent.index][mc.name == "mcImage" ? "imageLink" : "buttonLink"]);				var target : String = String(list[mcParent.index][mc.name == "mcImage" ? "imageTarget" : "buttonTarget"]);								URLNavigator.ChangePage(url, target);			}		}				/**		 * OVER HANDLER		 */		public function overHandler(event : MouseEvent) : void		{			var mc : MovieClip = event.currentTarget as MovieClip;						Tweener.addTween(mc.mcText, {_color : buttonOverColor, time : 0.5, transition : "easeOutExpo"});			Tweener.addTween(mc.mcBackground, {_color : buttonBackgroundOverColor, time : 0.5, transition : "easeOutExpo"});		}				/**		 * OUT HANDLER		 */		public function outHandler(event : MouseEvent) : void		{			var mc : MovieClip = event.currentTarget as MovieClip;						Tweener.addTween(mc.mcText, {_color : null, time : 0.5, transition : "easeOutExpo"});			Tweener.addTween(mc.mcBackground, {_color : buttonBackgroundColor, time : 0.5, transition : "easeOutExpo"});		}						/**		 * UPDATE LIST ON SEARCHING		 */		public function updateList(array : Array) : void		{			removedList = new Array();			updatedList = new Array();			var tempArray : Array = new Array();			tempArray = listMCS;						showList();						for(var i : uint = 0; i < array.length; i++)			{				updatedList[i] = listMCS[array[i]];			}						for(var p : uint = 0; p < listMCS.length; p++)			{				var temp : Boolean = false;								for(var q : uint = 0; q < updatedList.length; q++)				{					if(listMCS[p] == updatedList[q])					{						temp = true;					}				}								if(temp == false)				{					removedList.push(listMCS[p]);				}			}						for(var s : uint = 0; s < updatedList.length; s++)			{				Tweener.addTween(updatedList[s], {alpha : 1, y : (itemHeight + difference) * s, time : 0.1, transition : "easeOutExpo", onComplete : function() : void				{					//mcScrollbar.updateSlider();					mcScrollbar.update();					mcScrollbar.centrateScrub(0,0);				}});			}						for(var j : uint = 0; j < removedList.length; j++)			{				Tweener.addTween(removedList[j], {alpha : 0, time : 0.1, transition : "easeOutExpo", onComplete : function()				{					this.visible = false;					this.y = 0;					//mcScrollbar.updateSlider();					mcScrollbar.update();					mcScrollbar.centrateScrub(0,0);									}});			}		}				/**		 * SWOW THE ALL LIST		 */		private function showList() : void		{			for(var i : uint = 0; i < listMCS.length; i++)			{				listMCS[i].visible = true;			}		}					} // CLASS}// PACKAGE