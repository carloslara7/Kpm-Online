/** * Copyright (c) 2010 Vuzum LLC <http://www.vuzum.com/> */ package com.vuzum.utils{	// FLASH IMPORTS	import com.caurina.transitions.Tweener;	import com.caurina.transitions.properties.ColorShortcuts;	import flash.display.*;	import flash.events.*;	import flash.filters.BitmapFilter;	import flash.filters.ColorMatrixFilter;	import flash.filters.DropShadowFilter;	import flash.geom.ColorTransform;	import flash.geom.Rectangle;	import flash.net.LocalConnection;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;	import flash.net.URLRequestHeader;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	import flash.system.*;	import flash.text.AntiAliasType;	import flash.text.StyleSheet;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFieldType;	import flash.text.TextFormat;	import flash.utils.getTimer;	// CONSTRUCTOR	public class Prototypes	{		// STATIC MEMBERS		public static var sheet : StyleSheet;				public static function videoTimeConvert(myTime : Number) : String		{			var displayHours : Boolean = false;						if(isNaN(myTime)) myTime = 0;						// minutes			var minutes : String = "";			var minutesNr : Number = Math.floor( Math.round(myTime) / 60 ); //trace("Minutes: " + minutesNr);			if (minutesNr < 10)			{				minutes = "0" + minutesNr;			}			else				minutes += minutesNr;			minutes += ":";						// seconds			var seconds : String = "";			var secondsNr : Number = Math.floor( Math.round(myTime) % 60 ); //trace("Seconds: " + secondsNr);			if (secondsNr < 10) 			{				seconds = "0" + secondsNr;			}			else				seconds += secondsNr;						// hours			var hours : String = "";			var hoursNr : Number = Math.floor(minutesNr / 60);			if (displayHours) 			{				if (hoursNr < 10)				{					hours = "0" + hoursNr;				}				else					hours += hoursNr;				hours += ":";			}						// return			var currentTimeConverted : String = hours + minutes + seconds;			return currentTimeConverted;		}		/*		 * sets the style sheet that will be used in the hole project		 */		public static function setStyle(pSheet : StyleSheet = null) : void 		{			if(sheet == null) sheet = pSheet;		}				// INTERNAL MEMBERS		private var tracer : TextField;				// forces the garbace collector to erase the eligible elements		public static function forceGC() : void		{			try			{				new LocalConnection().connect('foo');				new LocalConnection().connect('foo');			}			catch (e:*) { }				    // Displays a text in the screen//			displayText("----- Garbage collection triggered -----");		}				public function getScope() : Prototypes		{			return this;		}		/**		 * CONSTRUCTOR		 */		public function Prototypes()		{			// init tweener			ColorShortcuts.init();									/**************************************************************			 * 			 * 					      MOVIECLIPS			 * 			 **************************************************************/			 			 //for (var item in modulesArray) { trace(item); trace(modulesArray[item].name);}			 			/*			 * flash tracer in browser			 */			MovieClip.prototype.ttrace = function(...args) : void			{				var str : String = "";				for(var i : Number = 0; i < args.length; i++) str += args[i] + " ";								if(tracer == null || !this.stage.contains(tracer))				{					tracer = TextField(this.stage.addChild(new TextField()));										// properties					tracer.type = TextFieldType.INPUT;					tracer.x = 10;					tracer.y = 10;					tracer.width = 200; 					tracer.height = 70; 					//					tracer.multiline = true;					tracer.wordWrap = true;					tracer.border = true;					tracer.background = true;					tracer.selectable = true;						}								// put the tracer on the highest depth				else				{					this.stage.setChildIndex(tracer, this.stage.numChildren - 1);				}							// write the string				//if(tracer.text == "") tracer.text = str + "\n";				//else tracer.text += str + "\n";				if(tracer.text == "") tracer.appendText(str + "\n");				else tracer.appendText(str + "\n");			};						/**			 * shows an error message			 */			MovieClip.prototype.showErrorMessage = function(msg : String = "ERROR!!!", 															boxWidth : Number = 370, 															boxHeight : Number = 60, 															fontSize : Number = 10,															displayCloseButton : Boolean = true):void			{				var scene : * = this.root.stage;								var mcError : MovieClip = new MovieClip();				var mcBack : MovieClip = new MovieClip();								//create the background				mcBack.graphics.beginFill(0xCCCCCC);				mcBack.graphics.drawRoundRect(0, 0, boxWidth, boxHeight, 10);				mcBack.graphics.endFill();				mcBack.graphics.lineStyle(1, 0xFFFFFF, 1, true, "none");				mcBack.graphics.drawRoundRect(0, 0, boxWidth-1, boxHeight-1, 10);				var dropShadow:DropShadowFilter = new DropShadowFilter(2, 45, 0x000000);				mcBack.filters = [dropShadow]; 												mcError.mcBack = mcError.addChild(mcBack);								var mcText : MovieClip = new MovieClip();				var txt : TextField = new TextField();								txt.width = boxWidth * 0.9;								//BEGIN FORMATTING THE TEXT				txt.antiAliasType = AntiAliasType.ADVANCED;																		txt.multiline = true;				txt.wordWrap = true;								txt.autoSize = "left";				txt.mouseEnabled = true;				txt.selectable = true;				txt.mouseWheelEnabled = false;	 				txt.htmlText = msg;								var fmt : TextFormat = new TextFormat();				fmt.align = "left";				fmt.font = "GROBOLD";				fmt.size = fontSize;								txt.setTextFormat(fmt);				//END FORMATING TEXT				mcText.txt = mcText.addChild(txt);								mcError.mcText = mcError.addChild(mcText);								mcText.x = Math.round((mcError.mcBack.width - mcText.width) / 2);				mcText.y = Math.round((mcError.mcBack.height - mcText.height) / 2);								//create the close button				if(displayCloseButton)				{					var buttonSize : Rectangle = new Rectangle(0, 0, 12, 12);					var offsetSign : Number = 3;					var mcButton : MovieClip = new MovieClip();										//draw the graphics					mcButton.graphics.beginFill(0x000000);					(mcButton.graphics as Graphics).drawEllipse(0, 0, buttonSize.width, buttonSize.height);					(mcButton.graphics as Graphics).endFill();					(mcButton.graphics as Graphics).lineStyle(1, 0xFFFFFF, 1, true, "none");					(mcButton.graphics as Graphics).moveTo(offsetSign, offsetSign);					(mcButton.graphics as Graphics).lineTo(buttonSize.width - offsetSign, buttonSize.height - offsetSign);					(mcButton.graphics as Graphics).moveTo(offsetSign, buttonSize.height - offsetSign);					(mcButton.graphics as Graphics).lineTo(buttonSize.width - offsetSign, offsetSign);										//add the button to the error box					mcError.mcCloseButton = mcError.addChild(mcButton);					mcError.mcCloseButton.x = mcError.mcBack.width - buttonSize.width - offsetSign;					mcError.mcCloseButton.y = offsetSign;										//add mouse events listeners					mcError.mcCloseButton.buttonMode = true;					mcError.mcCloseButton.addEventListener(MouseEvent.MOUSE_OVER, function():void					{						mcError.mcCloseButton.alpha = 0.8;					});										mcError.mcCloseButton.addEventListener(MouseEvent.MOUSE_OUT, function():void					{						mcError.mcCloseButton.alpha = 1;					});										mcError.mcCloseButton.addEventListener(MouseEvent.MOUSE_UP, function():void					{						scene.removeChild(mcError);					});										//apply drop shadow					dropShadow = new DropShadowFilter(1, 45, 0x000000, 0.7);					mcError.mcCloseButton.filters = [dropShadow];				}								//add the error to the root				scene.addChild(mcError);				mcError.x = Math.round((scene.stageWidth - mcError.mcBack.width) / 2);				mcError.y = Math.round((scene.stageHeight - mcError.mcBack.height) / 2);			};						/**			 * Scales an object to fit inside a square or cropped, based on the value of fitAll			 * @fitAll - if true, the entire object is scalled to fit the area 			 *         - if false, an area of the object will remain outside of the area			 */			MovieClip.prototype.fitToRect = function(pWidth : Number, pHeight : Number, fitAll : Boolean = true, repositionFlag : Boolean = true) : void			{				// first calculate the 2 ratios				var ratioWidth : Number = pWidth / this.width;				var ratioHeight : Number = pHeight / this.height;				if(fitAll)				{					//If the height ratio is smaller than the width ratio, we want to use					//that as are ratio to enlarge in height and width					if(ratioHeight <= ratioWidth)					{						this.height = this.height * ratioHeight;						this.width = this.width * ratioHeight;					}				  	//Otherwise we use the width ratio				  	else					{						this.height = this.height * ratioWidth;						this.width = this.width * ratioWidth;					}				}				else				{					//If the height ratio is smaller than the width ratio, we want to use					//that as are ratio to enlarge in height and width					if(ratioHeight > ratioWidth)					{						this.height = this.height * ratioHeight;						this.width = this.width * ratioHeight;					}				  	//Otherwise we use the width ratio				  	else					{						this.height = this.height * ratioWidth;						this.width = this.width * ratioWidth;					}				}												// force smoothing 				this.smoothing = true;			    				// center the object on the browser window				if(repositionFlag)				{					this.x = Math.round((pWidth - this.width) / 2);					this.y = Math.round((pHeight - this.height) / 2);				}			};			MovieClip.prototype.fitToObject = function(mc : MovieClip, fitAll : Boolean = true, repositionFlag : Boolean = true) : void			{				this.fitToRect(mc.width, mc.height, fitAll, repositionFlag);				this.x += mc.x;				this.y += mc.y;			}			/**			 * Rescales an object proportionally on width or height			 * flag = true - means scale on width			 */			MovieClip.prototype.scaleOnProperty = function(nr : Number = 0, flag : Boolean = true) : void			{				if(flag) 				{					this.width = nr;					this.scaleY = this.scaleX;										//this.height = Math.round(this.height);				}				else				{					this.height = nr;					this.scaleX = this.scaleY;										//this.width = Math.round(this.width);				}			};						/*			 * centrates an object on width or height			 */			MovieClip.prototype.centerOn = TextField.prototype.centerOn = function(pWidth : Number = NaN, pHeight : Number = NaN) : void			{				if(!isNaN(pWidth)) this.x = Math.round((pWidth - this.width) / 2);				if(!isNaN(pHeight)) this.y = Math.round((pHeight - this.height) / 2);			};			MovieClip.prototype.centerOnClip = TextField.prototype.centerOnClip = function(pClip : *) : void            {                this.centerOn(pClip.width, pClip.height);                this.x += pClip.x;                this.y += pClip.y;            };             			MovieClip.prototype.centerTextOn = function(pWidth : Number = NaN, pHeight : Number = NaN) : void			{				if(!isNaN(pWidth)) this.x = Math.round((pWidth - this.txt.textWidth) / 2);				if(!isNaN(pHeight)) this.y = Math.round((pHeight - this.txt.textHeight) / 2);			};    			MovieClip.prototype.centerTextOnClip = function(pClip : *) : void			{                this.centerTextOn(pClip.width, pClip.height);                this.x += pClip.x;                this.y += pClip.y;			};    			        						/**			 * 	ADDS EVENTS TO A MOVIECLIP TO CONTROL IT AS A BUTTON			 */			MovieClip.prototype.addEvents = function(scope : Object, flag : Boolean = true) : void 			{				// button mode				this.buttonMode = flag;								// mouse children				this.mouseChildren = false;								// tab enabled				if(flag) this.tabEnabled = false;								// event handlers				if(scope.overHandler != null) this.addEventListener(MouseEvent.MOUSE_OVER, scope.overHandler);				if(scope.outHandler != null) this.addEventListener(MouseEvent.MOUSE_OUT, scope.outHandler);								if(scope.pressHandler != null) this.addEventListener(MouseEvent.MOUSE_DOWN, scope.pressHandler);				if(scope.releaseHandler != null) this.addEventListener(MouseEvent.MOUSE_UP, scope.releaseHandler);			};						/**			 * 	REMOVE THE EVENTS FROM A MOVIECLIP CONTROLLED AS A BUTTON			 */			MovieClip.prototype.removeEvents = function(scope : Object) : void 			{				// button mode				this.buttonMode = false;								// event handlers				if(scope.overHandler != null) this.removeEventListener(MouseEvent.MOUSE_OVER, scope.overHandler);				if(scope.outHandler != null) this.removeEventListener(MouseEvent.MOUSE_OUT, scope.outHandler);								if(scope.pressHandler != null) this.removeEventListener(MouseEvent.MOUSE_DOWN, scope.pressHandler);				if(scope.releaseHandler != null) this.removeEventListener(MouseEvent.MOUSE_UP, scope.releaseHandler);			};			MovieClip.prototype.toggleEvents = function(scope : Object, flag : Boolean = true) : void			{				if(flag) this.addEvents(scope);				else this.removeEvents(scope); 			};						MovieClip.prototype.toggle = function(flag : Boolean = true, pAlpha : Number = 1) : void			{				this.alpha = (!isNaN(pAlpha) ? pAlpha : (flag ? 1 : 0));				this.mouseEnabled = flag; 			};									// makes a movieclip to look enabled/disabled			MovieClip.prototype.detectItemNo = function(itemName : String = null) : Number			{				if(itemName)				{					var str : String = this.name.toString();					return Number(str.substring(itemName.length, str.length));				}				return NaN;								};						/**************************			* Bandwidth Detector						Downloads a hidden test image from a predefined URL			and determines client bandwidth based on how			quickly the image is downloaded. 			Test image must be ~12k in filesize (smaller filesizes 			result in inaccurate detections on fast connections). 			Image is not cached due to random string added to URL.			(~300kbps cable/DSL, ~20kbps dialup)						*************************/						MovieClip.prototype.detectBandwidth = function(onCompleteFunction : Function = null, contentPath : String = null) : void			{				// gloabal vars				var startTime : Number = getTimer(); //trace("aici:", startTime);				var endTime : Number;				var datasize : Number;				var bandwidth : Number;								// on progress function				this.onProgressFunction = function(numBytesLoaded : Number, numBytesTotal : Number) : void 				{					datasize = numBytesTotal;					};				// on comeplete				this.onComplete = function(mc : MovieClip) : void				{					endTime = getTimer(); //trace("aici: ", endTime);					var offsetMilliseconds : Number = endTime - startTime;					var offsetSeconds : Number = offsetMilliseconds / 1000;					var bits : Number = datasize * 8;					var kbits : Number = bits / 1024;										// calculate bandwidth					bandwidth = (kbits / offsetSeconds);										// CALL THE COMPLETE FUNCTION					onCompleteFunction(Math.round(bandwidth));				};								// START LOADING				if(contentPath == null || contentPath == "" || contentPath == "undefined") contentPath = "bandwidth_detection.jpg";				this.loadContent(contentPath + "?t=" + new Date().getTime(), this.onComplete, null, false, false);								// End bandwidth detector code			 			};									/*			 * duplicates the bitmap from a movieclip loaded using the "loadContent" function			 */			MovieClip.prototype.duplicateBitmap = function(mc : MovieClip) : Bitmap 			{				var bmd : BitmapData = new BitmapData(mc.width, mc.height, true, 0xFFFFFF);		        bmd.draw(mc);		        // bitmap		        this.bitmap = new Bitmap(bmd);				this.bitmap.smoothing = true;				// add it inside 				return this.addChild(this.bitmap);			};								/*			 * duplicates an object you pass as parameter inside this movieclip			 * usage: var mc : MovieClip = mcRating.duplicateMovieClip(new mcStar(), "mcStar" + j); 			 */			MovieClip.prototype.duplicateMovieClip = function(obj : *, pName : String = "mcItem") : Object			{				this[pName] = this.addChild(obj);				this[pName].name = pName;								return this[pName];			};							/**			 * Utility function for loading content			 * @param contentPath			The URL to the content.			 * @param onCompleteFunction 	The function to be called after the content is loaded			 * @param mcLoader	    		The loader MovieClip to show while loading			 * @param showFlag				After the content is loaded is shown or not with tween depending on this param			 * @usage loadContent("http://www.vuzum.com/image.jpg", completeFunction, mcLoader, true, true); - last 2 params can miss as they are defined as default, mcLoader can miss too			 */			MovieClip.prototype.loadContent = function(contentPath : String, onCompleteFunction : Function = null, mcLoader : * = null, showFlag : Boolean = true) : void			{				var pTarget : MovieClip = this as MovieClip;				var bitmapFlag : Boolean = false;				if(contentPath.indexOf(".bmp") >= 0 || contentPath.indexOf(".jpg") >= 0 || contentPath.indexOf(".jpeg") >= 0  || contentPath.indexOf(".png") >= 0) bitmapFlag = true;								// RESET alpha				if(showFlag) pTarget.alpha = 0;								// SHOW THE LOADER movieclip				if(mcLoader != null) mcLoader.visible = true;												// LOAD THE NEW CONTENT IF IS THE CASE				if(contentPath != "" && contentPath != null) 				{					// CREATE THE LOADER					pTarget.loader = new Loader();									// COMPLETE LISTENER					pTarget.completeEventHandler = function(e:Event) : void 					{ 						// hide the loader						if(mcLoader != null) mcLoader.visible = false;             											// remove the old content if it was inside						if(pTarget.content != null && pTarget.contains(pTarget.content)) pTarget.removeChild(pTarget.content);											// add the new content and retain it to control its timeline if is a swf						if(bitmapFlag)						{							var bitmapHolder : MovieClip = new MovieClip();							bitmapHolder.addChild(pTarget.loader);							pTarget.content = pTarget.duplicateBitmap(bitmapHolder);						}						else pTarget.content = pTarget.addChild(pTarget.loader);											// show the new loaded content holder with tween if is the case						if(showFlag) 						{						  	pTarget.alpha = 0;						    pTarget.showObject();						}											// call the complete listener of the target						if(onCompleteFunction != null)						{						    if(onCompleteFunction.length) onCompleteFunction(pTarget);						    else onCompleteFunction();						}					};					pTarget.loader.contentLoaderInfo.addEventListener(Event.COMPLETE, pTarget.completeEventHandler);															// PROGRESS LISTENER					pTarget.progressEventHandler = function (event : ProgressEvent) : void 					{ 						if(pTarget.onProgressFunction != null) 						{							if(pTarget.onProgressFunction.length) pTarget.onProgressFunction(event);							else pTarget.onProgressFunction();						}					};					pTarget.loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, pTarget.progressEventHandler);																				// ERROR LISTENER					pTarget.ioErrorEventHandler = function() : void 					{						trace("The content " + contentPath + " doesn't exist!");												pTarget.showErrorMessage("The path to the content (" + contentPath + ") is NOT correct!\nPlease set the correct path...");												// call the complete listener of the target						if(pTarget.onIOErrorFunction != null) 						{							if(pTarget.onIOErrorFunction.length) pTarget.onIOErrorFunction(pTarget); 							else pTarget.onIOErrorFunction();						}											};					pTarget.loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, pTarget.ioErrorEventHandler);															// STOP LOADING FUNCTION so the user can stop the loading					pTarget.stopLoading = function() : void					{						// stop loading						if(pTarget.loader)						{							// remove listeners							pTarget.loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, pTarget.completeEventHandler);							pTarget.loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, pTarget.progressEventHandler);							pTarget.loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, pTarget.ioErrorEventHandler);														// close stream							try {pTarget.loader.close();} catch(e : *) {}														// unload							pTarget.loader.unload();													}												// remove current content						if(pTarget.numChildren) pTarget.removeChildAt(0);					};																// LOAD AND SHOW THE NEW CONTENT					pTarget.loader.load(new URLRequest(contentPath), new LoaderContext(false));				}			};						/*			 * SHOWS / HIDES a movieclip with tween			 */			MovieClip.prototype.showObject = function(flag : Boolean = true, pTime : Number = 0.5, completeFunction : Function = null, pTransition : String = "easeOutExpo") : void			{				// check vars				if(isNaN(pTime)) pTime = 0.5;				pTransition = readStringVar(pTransition, "easeOutExpo");								// change visible				if(flag) this.visible = flag;								// fade it				Tweener.addTween(this, {alpha : (flag ? 1 : 0), time : pTime, transition : pTransition, onComplete : function() : void 				{					// change visible					this.visible = flag;										if(completeFunction != null) completeFunction();				}});			};						MovieClip.prototype.fadeAlpha = function(pAlpha : Number = 1, pTime : Number = 0.5, pTransition : String = "easeOutExpo", completeFunction : Function = null) : void			{				Tweener.addTween(this, {alpha : pAlpha, time : pTime, transition : pTransition, onComplete : function() : void 				{					if(completeFunction != null) completeFunction();				}});			};									/******************** COLORS *************************/			MovieClip.prototype.setColor = TextField.prototype.setColor = function(pColor : Number = NaN, pTime : Number = 0.5, pTransition : String = "easeOutExpo", removeColorFlag : Boolean = false) : void 			{				pTime = (!isNaN(pTime) ? pTime : 0.5);				pTransition = readStringVar(pTransition, "easeOutExpo");								if(!isNaN(pColor)) 				{					Tweener.addTween(this, {_color : pColor, time : pTime, transition : pTransition});				}				else				{					if(removeColorFlag) Tweener.addTween(this, {_color : null, time : pTime, transition : pTransition});				}			};						MovieClip.prototype.removeColor = function() : void 			{				Tweener.addTween(this, {_color : null, time : 0, transition : "easeOutExpo"}); 			};							// sets on a movieclip a tint with an alpha amount					MovieClip.prototype.setTint = function(color : uint, amount : Number) : void 			{				var red:uint = color >> 16;				var green:uint = (color ^ (red << 16)) >> 8;				var blue:uint = (color ^ (red << 16)) ^ (green << 8);				var multiplier:Number = 1-amount;				var red_offset:Number = red*amount;				var green_offset:Number = green*amount;				var blue_offset:Number = blue*amount;				//				var object:DisplayObject = target as DisplayObject;//				if (!object) {//				object = this as DisplayObject;//				}//				if (!object) {//				throw new Error("ERROR setTint: incorrect target: "+target);//				}								this.transform.colorTransform =	new ColorTransform(multiplier, multiplier, multiplier, 1,																   red_offset, green_offset, blue_offset, 0);			};						MovieClip.prototype.removeTint = function() : void 			{				this.transform.colorTransform =	new ColorTransform();			};															/**			 * Changes the brightness of a MovieClip			 *@param level the new level of Brightness			 *@return void 			 */			MovieClip.prototype.setBrightness = function(level : Number) : void			{				var myElements_array : Array = [1, 0, 0, 0, level,                                        0, 1, 0, 0, level,                                        0, 0, 1, 0, level,                                        0, 0, 0, 1, 0];				var myColorMatrix_filter : ColorMatrixFilter = new ColorMatrixFilter(myElements_array);				this.filters = [myColorMatrix_filter];			};            			/**			 * Converts a MovieClip colors to Garyscale			 */			MovieClip.prototype.setToGrayscale = function() : void			{						this.cacheAsBitmap = true;						var matrix : Array = new Array();						matrix = matrix.concat([0.308600038290024, 0.609399974346161, 0.0820000022649765, 0, 0]);						// red				matrix = matrix.concat([0.308600008487701, 0.609399974346161, 0.0820000022649765, 0, 0]);						//green				matrix = matrix.concat([0.308600008487701, 0.609399974346161, 0.0820000246167183, 0, 0]);						// blue				matrix = matrix.concat([0, 0, 0, 1, 0]);						// alpha				var filter : BitmapFilter = new ColorMatrixFilter(matrix);						this.filters = new Array(filter);			};					/**			 * Removes Grayscale form a MovieClip			 */			MovieClip.prototype.removeGrayscale = function() : void			{				this.filters = new Array();			};	        	        			/*			 * DOT RUN			 */			MovieClip.prototype.dotrun = function(mydottext : String, char : String) : void			{				this.dots = 0;				this.dotdir = 0;				//	            if (char == undefined)				//	            {				//	                char = ".";				//	            }				this.maxdot = 4;				this.onEnterFrame = function() : void				{					this.dots += this.dotdir;					if (this.dots >= this.maxdot)					{						this.dotdir = -1;					}					else if (this.dots < 1)					{						this.dotdir = 1;					}					this.tempdots = "";					for (var dc : Number = 0;dc < this.dots; dc++)					{						this.tempdots += char;					}					this.txt.htmlText = mydottext + this.tempdots;				};			};									/*			 * A NICE TYPEWRITER TEXT EFFECT			 */			MovieClip.prototype.typewriter = function(newtext : String, oldtext : String, lspeed : Number, blinkdelay : Number, f : Function, v : Object) : void 			{				this.charToUse = " ";				//				if (oldtext == null)				{					oldtext = "";				}				this.temptext = oldtext;				this.counter = 0;				this.i = oldtext.length;				//	            if (lspeed == null)				//	            {				//	                lspeed = 1;				//	            }				//	            if (blinkdelay == null)				//	            {				//	                blinkdelay = 31;				//	            }				this.onEnterFrame = function() : void 				{					for (var mylspeed : Number = 0;mylspeed < lspeed; mylspeed++)					{						this.temptext = this.temptext + newtext.charAt(this.i);						if (newtext.charAt(this.i) == "<")						{							var htmlend : Number = newtext.indexOf(">", this.i);							var htmladd : Number = htmlend - this.i;							this.i = this.i + htmladd;							this.temptext = newtext.substr(0, this.i);							continue;						}						this.i++;					}					this.txt.htmlText = this.temptext + this.charToUse;					if (this.i >= newtext.length)					{						this.mybool = 1;						this.onEnterFrame = function():void 						{							this.counter++;							this.mybool = !this.mybool;							if (this.mybool == true)							{								this.txt.htmlText = this.temptext + this.charToUse;							}							else							{								this.txt.htmlText = this.temptext;							}							if (this.counter >= blinkdelay)							{								this.txt.htmlText = this.temptext;								this.counter = 0;								this.blinkremove();								delete this["onEnterFrame"];								f(v);							}						};					}				};			};									/*			 * REMOVE THE MOVIECLIP USED FOR THE TYPEWRITER EFFECT			 */			MovieClip.prototype.blinkremove = function():void 			{				this.onEnterFrame = function():void 				{					this._alpha = this._alpha - 10;					this._visible = !this._visible;					if (this._alpha <= 0)					{						this.removeMovieClip();					}				};			};	                			/**************************************************************			 * 			 * 					      TEXT FIELD			 * 			 **************************************************************/			/*			 * inits and writes a textfield(new mode for special characters)			 */			TextField.prototype.initTextEmbed = function(str : String = "", pFontName : String = "", 													pMultiline : Boolean = false, pType : String = "dynamic", 													pFontSize : Number = NaN, pFontColor : Number = NaN, 													pAutoSize : String = "left", pAlign : String = "left", 													pMouseEnabled : Boolean = false, pSelectable : Boolean = false, pMouseWheelEnabled : Boolean = false) : void 			{				// EMBED FONT				this.embedFonts = true;										// ANTIALIAS TYPE				this.antiAliasType = AntiAliasType.ADVANCED;																						// SINGLELINE / MULTILINE								this.multiline = pMultiline;				this.wordWrap = pMultiline;												// TYPE				this.type = (pType == "input" ? TextFieldType.INPUT : TextFieldType.DYNAMIC);				if(this.type == "input") 				{					pMouseEnabled = true;					pSelectable = true;//					pAlign = "left";				}									// AUTO SIZE				this.autoSize = readStringVar(pAutoSize, "left");								// MOUSE ENABLED				this.mouseEnabled = pMouseEnabled;	 				// SELECTABLE				this.selectable = pSelectable;								// MOUSE WHEEL	 				this.mouseWheelEnabled = pMouseWheelEnabled;	 	            	 				// WRITE THE TEXT				this.htmlText = readStringVar(str, "");					 				// SET FORMAT				var fmt : TextFormat = new TextFormat();				// align				fmt.align = readStringVar(pAlign, "left");									// font name				if(pFontName != "") fmt.font = pFontName;				// font size					if(!isNaN(pFontSize) && pFontSize > 0) fmt.size = pFontSize;				// font color				if(!isNaN(pFontColor) && pFontColor > 0) fmt.color = pFontColor;				// set format on textfield	 			//	 			this.defaultTextFormat = fmt;				this.setTextFormat(fmt);			};						// inits and writes a textfield inside a movieclip			MovieClip.prototype.initText = function(str : String = "", pFontName : String = "", 													pMultiline : Boolean = false, pType : String = "dynamic", 													pFontSize : Number = NaN, pFontColor : Number = NaN, 													pAutoSize : String = "left", pAlign : String = "left", 													pMouseEnabled : Boolean = false, pSelectable : Boolean = false, pMouseWheelEnabled : Boolean = false) : void 			{				// HIDE THE GUIDE TEXTFIELD if there is				if(this.txtGuide) 				{					this.txtGuide.visible = false;					this.txtGuide.scaleX = this.txtGuide.scaleY = 0; 				}								// CREATE THE TEXTFIELD if is the case				if(this.txt == null) this.txt = this.addChild(new TextField());								// call the inittextembed method for the textfield inside the movieclip				this.txt.initTextEmbed(str, pFontName, pMultiline, pType, pFontSize, pFontColor, pAutoSize, pAlign, pMouseEnabled, pSelectable, pMouseWheelEnabled);			};										/*			 * inits and writes a textfield(classic mode)			 */			TextField.prototype.initText = function(str : String = "", 													pMultiline : Boolean = false, pType : String = "dynamic", 													pFontSize : Number = NaN, pFontColor : Number = NaN, 													pAutoSize : String = "left", pAlign : String = "left", 													pMouseEnabled : Boolean = false, pSelectable : Boolean = false, pMouseWheelEnabled : Boolean = false) : void 			{				// call the inittextembed method for the textfield without the font name					this.initTextEmbed(str, "", pMultiline, pType, pFontSize, pFontColor, pAutoSize, pAlign, pMouseEnabled, pSelectable, pMouseWheelEnabled);			};																									// inits and writes a textfield with the CSS read from a class			TextField.prototype.initCSSText = function(str : String = "", mouseEnabledFlag : Boolean = true) : void 			{				// AUTO SIZE				this.autoSize = TextFieldAutoSize.LEFT;								// SCROLLABLE				//this.selectable = false;								// MOUSE ENABLED	            this.mouseEnabled = mouseEnabledFlag;	            				// CSS				if(sheet != null) 				{					trace("CSS");					this.styleSheet = sheet;				}	            	            // TEXT	            this.htmlText = str;			};											// changes the color of a textfield			TextField.prototype.setTextColor = function(pcolor : Number = NaN, defaultFlag : Boolean = false) : void 			{				var fmt : TextFormat = new TextFormat();				if(pcolor >= 0) 				{					fmt.color = pcolor;					//					if(defaultFlag) this.defaultTextFormat = fmt;					else this.setTextFormat(fmt);				}			};							// changes the size of a textfield			TextField.prototype.setSize = function(nr : Number = NaN, defaultFlag : Boolean = false) : void 			{				var fmt : TextFormat = new TextFormat();				if(nr >=1) 				{					fmt.size = nr;					//					if(defaultFlag) this.defaultTextFormat = fmt;					else this.setTextFormat(fmt);				}			};			// changes the size of a textfield			TextField.prototype.setAlign = function(pAlign : String = "left", defaultFlag : Boolean = false) : void 			{				var fmt : TextFormat = new TextFormat();				fmt.align = readStringVar(pAlign, "left");				//				if(defaultFlag) this.defaultTextFormat = fmt;				else this.setTextFormat(fmt);			};									// changes the size, color, bold, italic and underline of the text inside a textfield			TextField.prototype.format = function(psize : Number, pcolor : Number, 												  pbold : Boolean = false, pitalic : Boolean = false, punderline : Boolean = false, 												  defaultFlag : Boolean = false) : void 			{				var fmt : TextFormat = new TextFormat();				if(!isNaN(psize)) fmt.size = psize;				if(!isNaN(pcolor)) fmt.color = pcolor;				fmt.bold = pbold;				fmt.italic = pitalic;				fmt.underline = punderline;				//				if(defaultFlag) this.defaultTextFormat = fmt;				else this.setTextFormat(fmt);			};									// checks if a textfield is not empty, is number or email			TextField.prototype.isValid = function(scope : *, type : String = "") : Boolean 			{				var txfd : TextField = this as TextField;				 				// check if is empty				if (txfd.text.toString() == "" || txfd.text.toString() == null) 				{					scope.stage.focus = this;										//this.mcError.typewriter(errorText, "", 5, 10);					scope.mcError.txt.text = scope.emptyFieldMessage;										return false;				}								// check if is number				if(type == "number" && isNaN(Number(txfd.text)))				{					scope.stage.focus = txfd;										//this.mcError.typewriter(errorText, "", 5, 10);					scope.mcError.txt.text = scope.NaNFieldMessage;										return false;								}								// check if is email				if(type == "email" && !txfd.text.toString()["isEmail"]())				{					scope.stage.focus = txfd;										//this.mcError.typewriter(errorText, "", 5, 10);					scope.mcError.txt.text = scope.invalidMailFieldMessage;										return false;								}											// if is correct				scope.mcError.txt.text = "";				return true;			};				        			/**************************************************************			 * 			 * 					      STRING			 * 			 **************************************************************/		    String.prototype.stripSpaces = function ()			{				return (this.split(" ").length > 1) ? (this.split(" ").join("")).stripSpaces() : this;			}; 			 						String.prototype.isFull = function() : Boolean			{				var aray = this.split("");				var lengthus = aray.length;				var total = 0;								for (var i in aray) 					if (aray[i] == " ") total += 1;								if (total == lengthus) 					return false;				else 					return true;			};									// trim spaces in both ends			String.prototype.trim = function() 			{				var ini : Number = 0;				var fim : Number = this.length-1; 				var i : Number;								for(i=ini;i<=fim;i++) { ini=i; if(this.charCodeAt(i)!=32) { break; } }				for(i=fim;i>=ini;i--) { fim=i; if(this.charCodeAt(i)!=32) { fim++; break; } }				return this.substring(ini,fim);			}						// left trim			String.prototype.ltrim = function() 			{				var ini : Number = 0;				var fim : Number = this.length-1; 				var i : Number;								for(i=ini;i<=fim;i++) { ini=i; if(this.charCodeAt(i)!=32) { break; } }				return this.substring(ini,fim);			}						// right trim			String.prototype.rtrim = function() 			{				var ini : Number = 0;				var fim : Number = this.length-1; 				var i : Number;								for(i=fim;i>=ini;i--) { fim=i; if(this.charCodeAt(i)!=32) { fim++; break; } }				return this.substring(ini,fim);			}									 /*			  * takes out white spaces from a string			  */			  			String.prototype.oldtrim = function () : String			{				var s : String = String(this);				while (true)				{					if (s.charAt((s.length - 1)) == " " || s.charAt((s.length - 1)) == "\n" || s.charAt((s.length - 1)) == "\r") 					{						s = s.substr(0, (s.length - 1));					} else 					{						break;					}				}				var i : Number = 0;				while (true) 				{					if (s.charAt(i) == " " || s.charAt(i) == "\n" || s.charAt(i) == "\r") 					{						s = s.substr((i + 1), (s.length - 1));					} else 					{						break;					}					i++;				}				return s;			};							// replaces a substring in a string			String.prototype.replaceSubString = function (replaceFrom : String, replaceTo : String, caseSensitive : Boolean) : String 			{				var start : Array = this.split(replaceFrom);				var tmp : String = start.join(replaceTo);				if (!caseSensitive) 				{					start = tmp.split(replaceFrom.toLowerCase());					tmp = start.join(replaceTo);					start = tmp.split(replaceFrom.toUpperCase());					tmp = start.join(replaceTo);				}				return tmp;			};						//  CHECKS IF A STRING IS EMAIL			String.prototype.isEmail = function() : Boolean			{				// email address has to have at least 5 chars				if (this.length < 6)				{					return false;				}								// not allowed charcters				var iChars : String = "*|,\":<>[]{}`';()&$#%+";				var eLength : Number = this.length;				for (var i : Number = 0;i < eLength; i++)				{					if (iChars.indexOf(this.charAt(i)) != -1)					{						//trace("Invalid Email Address : Illegal Character in Email Address : -->"+this.charAt(i)+"<--.");						return false;					}				}								// position of @				var atIndex : Number = this.lastIndexOf("@");				if (atIndex < 1 || (atIndex == eLength - 1))				{					//trace("Invalid Email Address : Email Address must contain @ as at least the second chararcter.");					return false;				}				// 2 of @ are not allowed				if(this.indexOf("@") != atIndex) return false;	            				// position of last .				var dotIndex : Number = this.lastIndexOf(".");				if (dotIndex < 4 || (dotIndex == eLength - 1) || (dotIndex >= eLength - 2))				{					//trace("Invalid Email Address : Email Address must contain at least one . (period) in a valid position");					return false;				}	            				// position of last . after @				if (1 >= dotIndex - atIndex)				{					//trace("Invalid Email Address : Email Address must be in the form of name@domain.domaintype");					return false;				}	            	            				// not 2 of . or @ consequently				for (i = 0;i < eLength; i++)				{					if ((this.charAt(i) == "." || this.charAt(i) == "@") && this.charAt(i) == this.charAt(i - 1))					{						//trace("Invalid Email Address : Cannot contain two \".\" or \"@\" in a row : -->" + this.charAt(i) + "<--.");						return false;					}				}	            				return true;			};						//		    private function validateEmail(email : String) : Boolean //		    {		//		        var fstLett : String = email.substring(0, 1);//		        var lastLett : String = email.substring(email.length, -1);//		        var minLettAfterLastPoint : Number = 2;//		        var maxLettAfterLastPoint : Number = 4;//		        var minLettBeforeAt : Number = 1;//		        var maxLettBeforeAt : Number = 20;//		        var minLettAfterAt : Number = maxLettAfterLastPoint;//		        var firstAt : Number = email.indexOf("@", 0);//		        var lastAt : Number = email.lastIndexOf("@", email.length);//		        var strBeforeAt : String = email.substring(0, firstAt);//		        var lettBeforeAt : String = email.charAt(firstAt - 1);//		        var lettAfterAt : String = email.charAt(firstAt + 1);//		        var firstScore : Number = email.indexOf("-", 0);//		        var lettBeforeScore : String = email.charAt(firstScore - 1);//		        var lettAfterScore : String = email.charAt(firstScore + 1);//		        var firstUnderscore : Number = email.indexOf("_", 0);//		        var lettBeforeUnderscore : String = email.charAt(firstUnderscore - 1);//		        var lettAfterUnderscore : String = email.charAt(firstUnderscore + 1);//		        var firstPoint : Number = email.indexOf(".", 0);//		        var lastPoint : Number = email.lastIndexOf(".", email.length);//		        var lettAfterLastPoint : Number = email.length - lastPoint - 1;//		        var morePoints : Number = email.indexOf("..", 0);//		        var moreScore : Number = email.indexOf("--", 0);//		        var extensionScore : Number = email.indexOf("-", lastPoint);//		        var extensionUnderscore : Number = email.indexOf("_", lastPoint);//		        //		        if (email == "" ||//		        	!isNaN(Number(fstLett)) || //		        	!isNaN(Number(lastLett)) || //		        	fstLett == "." || fstLett == "-" || fstLett == "_" || //		        	lastLett == "." || lastLett == "-" || lastLett == "_" || //		        	firstAt == -1 || firstAt >= (email.length - minLettAfterAt) || firstAt == 0 || firstAt !== lastAt || //		        	firstPoint == 0 || //		        	lastPoint == -1 || //		        	lettAfterLastPoint < minLettAfterLastPoint || lettAfterLastPoint > maxLettAfterLastPoint || //		        	lettBeforeAt == "." || lettBeforeAt == "_" || lettBeforeAt == "-" || lettBeforeAt == " " || //		        	lettAfterAt == "." || lettAfterAt == "_" || lettAfterAt == "-" || lettAfterAt == " " || //		        	lettBeforeScore == "." || lettBeforeScore == "_" || lettBeforeScore == "@" || //		        	lettAfterScore == "." || lettAfterScore == "_" || lettAfterScore == "@" || //		        	lettBeforeUnderscore == "." || lettBeforeUnderscore == "-" || lettBeforeUnderscore == "@" || //		        	lettAfterUnderscore == "." || lettAfterUnderscore == "-" || lettAfterUnderscore == "@" || //		        	morePoints !== -1 || //		        	moreScore !== -1 || //		        	extensionScore !== -1 || //		        	extensionUnderscore !== -1 || //		        	strBeforeAt.length < minLettBeforeAt || strBeforeAt.length > maxLettBeforeAt) //		        {//		            return false;//		        } //		        else //		        {//		            return true;//		        }//		    }																		/***************************************************			 * 			 * 					DATE			 * 			 ***************************************************/									Date.prototype.toSlashFormat = function() : String 			{				return (this.getMonth()+1 + "/" + this.getDate() + "/" + this.getFullYear());			};						Date.prototype.time12Format = function() : String 			{				return getUSClockTime(this.getHours(), this.getMinutes());			};								}// FROM CONSTRUCTOR						public static function getUSClockTime(hrs:uint, mins:uint) : String 		{		    var modifier:String = "PM";		    var minLabel:String = doubleDigitFormat(mins);				    if(hrs > 12) 		    {		        hrs = hrs-12;		    } 		    else 			    if(hrs == 0) 			    {			        modifier = "AM";			        hrs = 12;			    } 			    else 				    if(hrs < 12) 				    {				        modifier = "AM";				    }				    return (doubleDigitFormat(hrs) + ":" + minLabel + " " + modifier);		}				public static function doubleDigitFormat(num:uint) : String 		{		    if(num < 10) return ("0" + num);		    return String(num);		}						public static function hourTo12(h : Number) : Object		{			var temp : Object = new Object();			temp.me = (h >= 12 ? "PM" : "AM");			temp.h =  (h >= 13 ? (h - 12) : (h == 0 ? 12 : h));			return temp;		}				/*		 * determines the number of days in a month		 */		public static function numberOfDays(monthNo : Number=1, yearNo : Number = NaN) : Number		{			var noDays : Number = 0;						switch(monthNo)			{				// months with 31 days				case 1:				case 3:				case 5:				case 7:				case 8:				case 10:				case 12:					noDays = 31;					break;								// months with 30 days					case 4:				case 6:				case 9:				case 11:					noDays = 30;					break;													// february	month				case 2:					var tempYearNo : Number = ((isNaN(yearNo)) ? new Date().getFullYear() : yearNo);					noDays = ((tempYearNo % 4) ? 28 : 29);					break;								}			return noDays;		}				/*		 * determines the number of days between 2 dates		 */		public static function getDaysBetweenDates(date1:Date, date2:Date) : Number		{			var one_day:Number = 1000 * 60 * 60 * 24;			var date1_ms:Number = date1.getTime();			var date2_ms:Number = date2.getTime();		    			var difference_ms:Number = Math.abs(date1_ms - date2_ms);	    			return Math.round(difference_ms/one_day);		}					/*		 * determines the number of dates between 2 dates		 */				public static function getDatesBetweenDates(date1:Date, date2:Date):int		{			var one_day:Number = 1000 * 60 * 60 * 24;			//			var tempDate1 : Date = new Date(date1);			tempDate1.setHours(0, 0, 0, 0);			var date1_ms:Number = tempDate1.getTime();			//			var tempDate2 : Date = new Date(date2);			tempDate2.setHours(0, 0, 0, 0);			var date2_ms:Number = tempDate2.getTime();			//		    			var difference_ms:Number = Math.abs(date1_ms - date2_ms);			//	    			return Math.floor(difference_ms/one_day);		}						/*		 * cheks if a birthdate has a specific age		 * call: trace( Prototypes.checkAge(18, new Date(1992, 4, 24)) );		 */		public static function checkAge(age : Number, date : Date) : Boolean		{			var currDate = new Date();			var yearsBeforeDate = new Date(currDate.getFullYear() - age, currDate.getMonth(), currDate.getDate());						//trace("has ", age, " years: ", yearsBeforeDate >= date);							return (yearsBeforeDate >= date);			}					/***************************************************		 * 		 * 					STRING FUNCTIONS		 * 		 ***************************************************/		public static function replace(str : String, find : String, replace : String) : String		{			return str.split(find).join(replace);		}		 			    		/***************************************************		 * 		 * 					ARRAY FUNCTIONS		 * 		 ***************************************************/		 	    		/*		 * insterts an element in an array at the @param position 		 */        public static function insert(a : Array, index : uint, value : *) : Array        {           if(!(index >= 0)) return a;           var original : Array = a.slice();           var temp : Array = original.splice(index);           original[index] = value;           original = original.concat(temp);           return original;        }				/*		 * takes out an element from an array at the @param position 		 */        public static function pull(a : Array, value : *) : Array        {        	if(a.length<1) return a;        	          	var newArray : Array = new Array();                      	for(var i : Number = 0; i < a.length; i++)			{				if(a[i] != value) newArray.push(a[i]);			}                        a = newArray;			return newArray;        }        		/*		 * randomizes an array		 */		        public static function randomize(pArray : Array) : Array        {        	// copy the array        	var a : Array = new Array();			for(var i : int = 0; i < pArray.length; i++) a[i] = pArray[i];        	        	        	// test the length            i = a.length;            if (i == 0) return a;                        // randomize            while (--i)             {                var j : Number = Math.floor(Math.random()*(i+1));                var tmp1 : * = a[i];                var tmp2 : * = a[j];                a[i] = tmp2;                a[j] = tmp1;            }                        // return the new array            return a;        }                /*         * creates a randomized @param rdm long array of numbers          */                public static function randoMix(rdm : Number = 10) : Array		{			var a : Array = new Array;						for (var i : Number = 0; i < rdm; i++)			{				a[i] = i;			}						a = randomize(a);						return a;		}                /*         * removes the dupplicates from an array         */		public static function removeDuplicates(array : Array) : Array        {            var tempArray : Array = new Array();                        for (var i : Number = 0; i < array.length; i++)                if(tempArray.indexOf(array[i]) < 0) tempArray.push(array[i]);                            return tempArray;        }                                /*         * traces an array         */        public static function traceArray(a : Array, property : String = "") : String        {        	var str : String = "";        	           	for(var i : Number = 0; i < a.length; i++)			{				str += (property != "" ? a[i][property] : a[i].name) + " ";			}						trace("ARRAY:", str);			return str;        }                 				/***************************************************		 * 		 * 					SWF CHECK FUNCTIONS		 * 		 ***************************************************/						/**	     * checks the expiration date and starts the appplication	     * call : if(Prototypes.isExpired(15, 8, 2009))	     */	    public static function isExpired(expirationDay : Number = NaN, expirationMonth : Number = NaN, expirationYear : Number = NaN) : Boolean	    {			// current date  			var currentDate : Date = new Date();			var expirationDate : Date = new Date((!isNaN(expirationYear) ? expirationYear : currentDate.getFullYear()), (!isNaN(expirationMonth) ? expirationMonth-1 : currentDate.getMonth()), (!isNaN(expirationDay) ? expirationDay : currentDate.getDate()));						if(currentDate >= expirationDate) return true; 				return false;	    }         		        		/***************************************************		 * 		 * 					LOAD FUNCTIONS		 * 		 ***************************************************/		        		 	    /**	     * sends some vars to an url and executes a handler on response	     * @param url 				The path to the php script	     * @param varsArray 		An array of pairs of vars	     * @param completeHandler 	The function to be called after the response from the php script has been received	     * usage: Prototypes.sendAndload(loadScript, ["videoId", 3, "startSec", 3, "endSec", 10], completeHandler);	     */		//public static function sendAndload(url : String, varsObject : Object, completeHandler : Function) : void		public static function sendAndload(url : String, varsArray : Array = null, completeHandler : Function = null, ioErrorHandler : Function = null, progressHandler : Function = null) : void		{		 			// send vote to the php script			var scriptRequest : URLRequest = new URLRequest(url);  			var scriptLoader : URLLoader = new URLLoader();  			var scriptVars : URLVariables = new URLVariables(); //URLVariables(varsObject); //  						// prepare event listners            scriptLoader.addEventListener(Event.COMPLETE, function(event : Event) : void {if(completeHandler != null) completeHandler(event);});            scriptLoader.addEventListener(IOErrorEvent.IO_ERROR, function(event : IOErrorEvent) : void {if(ioErrorHandler  != null) ioErrorHandler(event);});            scriptLoader.addEventListener(ProgressEvent.PROGRESS, function(event : ProgressEvent) : void {if(progressHandler != null) progressHandler(event);});            			// write the load vars//			for each(var property in varsObject)//            {//				trace(property);//				scriptVars[property] = varsObject[property];//				//trace(varsObject[property]);            	//            }			            			for(var i : Number = 0; i < varsArray.length; i+=2)            {				scriptVars[varsArray[i]] = varsArray[i+1];				//trace(varsArray[i], varsArray[i+1]);            	            }			            						// setup the loader			scriptLoader.dataFormat = URLLoaderDataFormat.VARIABLES;			scriptRequest.method = URLRequestMethod.POST;			scriptRequest.data = scriptVars;						// make the script request			scriptLoader.load(scriptRequest);		}				/**	     * sends some vars to an url and executes a handler on response	     * @param url 				The path to the php script	     * @param varsArray 		An array of pairs of vars	     * @param completeHandler 	The function to be called after the response from the php script has been received	     * usage: Prototypes.sendAndloadWithHeader(loadScript, ["videoId", 3, "startSec", 3, "endSec", 10], completeHandler, header);	     */		public static function sendAndloadWithHeader(url : String, varsArray : Array = null, completeHandler : Function = null, pHeader : URLRequestHeader = null, ioErrorHandler : Function = null, progressHandler : Function = null) : void		{		 			// send vote to the php script			var scriptRequest : URLRequest = new URLRequest(url);  			var scriptLoader : URLLoader = new URLLoader();  			var scriptVars : URLVariables = new URLVariables(); //URLVariables(varsObject); //  			  			// prepare event listners  			scriptLoader.addEventListener(Event.COMPLETE, function() : void {if(completeHandler != null) completeHandler();});            scriptLoader.addEventListener(IOErrorEvent.IO_ERROR, function() : void {if(ioErrorHandler  != null) ioErrorHandler();});            scriptLoader.addEventListener(ProgressEvent.PROGRESS, function() : void {if(progressHandler != null) progressHandler();});						// write the load vars//			for each(var property in varsObject)//            {//				trace(property);//				scriptVars[property] = varsObject[property];//				//trace(varsObject[property]);            	//            }			                        if(varsArray)			for(var i : Number = 0; i < varsArray.length; i+=2)            {				scriptVars[varsArray[i]] = varsArray[i+1];				//trace(varsArray[i], varsArray[i+1]);            	            }						// setup the loader			scriptLoader.dataFormat = URLLoaderDataFormat.VARIABLES;			scriptRequest.method = URLRequestMethod.POST;			scriptRequest.data = scriptVars;			scriptRequest.requestHeaders.push(pHeader);						// make the script request			scriptLoader.load(scriptRequest);		}				/*		 * LOADS AN XML FILE AND CALLS THE COMPLETE FUNCTION WITH THE XML OBJECT AS PARAM		 * call: loadXML(file.xml, completeFunction, mcLoader);		 */		public static function loadXML(xmlPath : String = null, completeFunction : Function = null, mcLoader : * = null, errorFunction : Function = null, progressFunction : Function = null) : void		{			// HIDE THE LOADER			if(mcLoader != null) mcLoader.visible = true;									// LOAD THE XML AND AFTER call the complete function			var xmlLoader : URLLoader; //trace(xmlPath);			if(xmlPath != "" && xmlPath != null) 			{				xmlLoader = new URLLoader(new URLRequest(xmlPath));				xmlLoader.addEventListener(IOErrorEvent.IO_ERROR, function() : void 				{					trace("Could no load the file '", xmlPath, "'!");					if(errorFunction != null) errorFunction();				});				xmlLoader.addEventListener(ProgressEvent.PROGRESS, function(event : ProgressEvent) : void {if(progressFunction != null) progressFunction(event.bytesLoaded, event.bytesTotal);});				xmlLoader.addEventListener(Event.COMPLETE, function(e : Event) : void				{									// READ THE ROOT					var xmlObject : XML = new XML(e.target.data);					xmlObject.ignoreWhitespace = true;										if(mcLoader != null) mcLoader.visible = false;										// CALL THE COMPLETE FUNCTION					if(completeFunction != null) completeFunction(xmlObject);				});			}						// SHOW ERROR						else			{				if(xmlPath == "") trace("The xml file path is empty!");				else trace("The file '", xmlPath, "' does not exist!");								if(errorFunction != null) errorFunction();			}		} 				/*		 * READ FLASHVARS AND XML NODES FUNCTIONS		 */		// read number values from XML		public static function readNumberVar(pValue : *, pDefaultValue : Number = NaN) : Number		{			if(pValue != undefined && pValue != "" && pValue != null && !isNaN(pValue)) return Number(pValue);			return pDefaultValue;					}				// read boolean values from XML		public static function readBooleanVar(pValue : *, pDefaultValue : Boolean = false) : Boolean		{			if(pValue == "true") return true;			if(pValue == "false") return false;			return pDefaultValue;					}				// read string values from XML		public static function readStringVar(pValue : *, pDefaultValue : String = "") : String		{			if(pValue != "" && pValue != undefined && pValue != null) return pValue;			return pDefaultValue;					}				// read path to files        public static function readPathTo(pValue : *, pDefaultValue : String = "") : String        {            if(pValue != null) return pValue;            return pDefaultValue;                    }				// read string values from XML		public static function readAssetPath(pValue : * = "", pPathToFiles : String = "") : String		{			return ((pValue == "" || pValue == undefined || pValue == null) ? "" : (pValue.indexOf("://") == -1 ? pPathToFiles : "") + pValue);		}						/***************************************************		 * 		 * 					AUX FUNCTIONS		 * 		 ***************************************************/		        /**         * determines a random number between the params values         */		public static function randomBetween(min : Number, max : Number) : Number         {            var randomNum : Number = Math.round(Math.random() * (max - min) + min);            return randomNum;        }        		/*         * function useful for arranging elements in a grid, based on columns or lines          */ 		public static function  makeGrid() : void		{//			for (var i = 1; i <= maxNr; i++) //			{//				var mc:MovieClip = mc0.duplicateMovieClip("mc"+i, i);//				mc.nr = i;//				//				mc._x = mc0.x + (mc0.width + distanceX)*((i-1) % nrColumns);//				mc._y = mc0.y + (mc0.height + distanceY)*(int((i-1) / nrColumns));//				//				/*//				mc._x = mc0.x + (mc0.width + distanceX)*(int((i - 1) / nrLines));//				mc._y = mc0.y + (mc0.height + distanceY)*((i - 1) % nrLines);//				*///			}		}	} // FROM CLASS}// FROM PACKAGE