package com.kpm.games{	import com.kpm.common.KpmShape;	import com.kpm.common.MovieList;	import com.kpm.common.Util;		import flash.display.*;		public class Game2ShapeList extends MovieList 	{		public var puzzleShapeTypes			: Array;		protected var distractorShapes  	: Array;		protected var g2				: Game2;		protected var maxDistractorHeight	: Number;		protected var maxWidth	: Number;				public static const DISTRACTORS_IN_PUZZLE 			: int = 1;		public static const DISTRACTORS_SIMILAR_TO_PUZZLE 	: int = 2;		public static const	DISTRACTORS_ANY_ALLOWED_TYPE 	: int = 3;		public static const DISTRACTORS_SIMILAR_TO_ANSWER 	: int = 4;				public function Game2ShapeList(pObject : Object, pShapeTypes : Array, pGame2 : Game2)		{			super(true, pObject.between.y, 0, pObject.min, pObject.max);			maxDistractorHeight = pObject.maxDistractorHeight;				maxWidth = pObject.max.x;					puzzleShapeTypes = pShapeTypes;			g2 = pGame2;						Util.debug(maxDistractorHeight, this);			Util.debug(max, this);			//Util.debug(MinHeight, this);			//Util.debug(FixedHeight, this);					}						public function generateShapes(	pChosenShape : MovieClip, 										pNumOptions  : uint = 3)		{			init();			//Util.printArray(mShapeTypes);			var tempShape : MovieClip;			var index : uint;			distractorShapes  = new Array();			var temp : Number ;						var numOptions : uint = pNumOptions-1;			if(pChosenShape.attempts > 0)				numOptions--;					tempShape = Util.createMc(pChosenShape.Type);			Util.copyColor(pChosenShape.tFill,tempShape.tFill);		 	 		 	tempShape.transform = pChosenShape.transform; 						if(g2.G2Data.lvl_DistractorRotation)				tempShape.rotation = Util.getRandomAngleBetween(25,90);			else				Util.copyRotation(pChosenShape, tempShape);						addShape(tempShape);			addToDistractors(pChosenShape.Type);			addToDistractors("KpmShape");												for(var i=0; i< numOptions; i++)			{				makeDistractor(pChosenShape);							}						if(g2.G2Data.lvl_DistractorType != DISTRACTORS_IN_PUZZLE)			{					makeAllSimilarSize(0);				fixHeightAndWidth(0);			}						if(g2.G2Data.lvl_DistractorType == DISTRACTORS_SIMILAR_TO_PUZZLE)				checkSimilarSizeInPuzzle(0);									//makeDistractorsSmall(0);						shuffleMovieList();						for (var j =  MovieArray.length - 1 ; j >= 0 ; j--)			{					if(Util.getClassName(MovieArray[j]) == "ThirtyRightTriangle")				{					MovieArray[j].y += MovieArray[j].height/3.5; 					}			}						distributeEvenly(Game2Data.OPTIONS_MAX_HEIGHT);									}				public function makeDistractor(pChosenShape : MovieClip)		{			var type : String;			var tempShape : MovieClip;						Util.debug("type of distractors is " + g2.G2Data.lvl_DistractorType);			if(g2.G2Data.lvl_DistractorType == DISTRACTORS_IN_PUZZLE)			{				var i =0;				do				{					tempShape = g2.CurrentPuzzle.getRandomShape(); 					type = tempShape.Type;					Util.debug("generating distractors from puzzle" + type);					i++;				}				while(height + tempShape.height + 40 >= 550 && i < 10);								if(i == 10)					type = "";			}							else if(g2.G2Data.lvl_DistractorType == DISTRACTORS_SIMILAR_TO_PUZZLE)			{				tempShape = g2.CurrentPuzzle.getRandomShape();				type = Util.getRandomElementNotIn(Game2Data.simShapes[tempShape.Type], distractorShapes) as String;				Util.debug("generating distractors similar puzzle" + type);			}						else if(g2.G2Data.lvl_DistractorType == DISTRACTORS_ANY_ALLOWED_TYPE)				type = Util.getRandomElementNotIn(puzzleShapeTypes, distractorShapes) as String;			else if(g2.G2Data.lvl_DistractorType == DISTRACTORS_SIMILAR_TO_ANSWER)				type = Util.getRandomElementNotIn(Game2Data.simShapes[pChosenShape.Type], distractorShapes) as String;						if(type != "")			{				Util.debug("generating type " + type, this);				tempShape = Util.createMc(type);				if(g2.G2Data.lvl_DistractorRotation)					tempShape.rotation = Util.getRandomAngleBetween(25,90);								if(g2.G2Data.lvl_PlaceShape)					tempShape.tFill.transform.colorTransform = Util.randomColorTransform();				else					tempShape.tFill.transform.colorTransform = 						pChosenShape.tFill.transform.colorTransform;															distractorShapes.push(type);								addShape(tempShape);									addToDistractors(type);			}		}				public function hitShape(pShape : MovieClip) : MovieClip		{			addChild(pShape);			var movieArray 	: Array = hitMovies(pShape);			removeChild(pShape);						for(var i=0; i < movieArray.length; i++)			{				if(Util.getClassName(movieArray[i]) == Util.getClassName(pShape))						return movieArray[i];			}						for(i=0; i < movieArray.length; i++)			{				return movieArray[i];			}						return null;		}				public function addToDistractors(pType : String)		{			if(g2.G2Data.lvl_DistractorType == DISTRACTORS_SIMILAR_TO_ANSWER)				distractorShapes.push(pType);			else			{				for(var item in puzzleShapeTypes)				{					Util.debug("looping " + puzzleShapeTypes[item], this);					if(KpmShape.getShortType(puzzleShapeTypes[item]) == 					   KpmShape.getShortType(pType))					{						Util.debug("pushing", this);						distractorShapes.push(puzzleShapeTypes[item]);					}				}			}		}				public function fixHeightAndWidth(pChosenIndex : int)		{			var remainingHeight = 550 - MovieArray[pChosenIndex].height;			var maxHeightPerDistractor = remainingHeight/2 - 40; 			var scalingFactor : Number;						for (var i =  MovieArray.length - 1 ; i >= 0 ; i--)			{				Util.debug("", this);				Util.debug( MovieArray[i]  + " height " + MovieArray[i].height, this);				if(MovieArray[i].height > maxHeightPerDistractor && i != pChosenIndex)				{					Util.debug("making smaller", this);					scalingFactor = maxHeightPerDistractor/MovieArray[i].height;					MovieArray[i] = Util.changeMovieSize(MovieArray[i], scalingFactor);					Util.debug("height " + MovieArray[i].height, this);				} 				//				if(MovieArray[i].height > maxDistractorHeight && i != pChosenIndex)//				{//					Util.debug("making smaller", this);//					MovieArray[i] = Util.changeMovieSize(MovieArray[i], 0.75);//					Util.debug("height " + MovieArray[i].height, this);//				} 								if(MovieArray[i].width >  maxWidth && i != pChosenIndex)				{					Util.debug("making smaller", this);					scalingFactor = maxWidth/MovieArray[i].width;					MovieArray[i] = Util.changeMovieSize(MovieArray[i], scalingFactor);					Util.debug("width " + MovieArray[i].width, this);				}			}					}				public function makeAllSimilarSize(pChosenIndex : int)		{					var scaleChosen, scaleDistractor, smallFactor : Number;			Util.debug("scale shapes " + Game2Data.scaleShapes[Util.getClassName(MovieArray[pChosenIndex])], this);			Util.debug("scale chosen X" + MovieArray[pChosenIndex].scaleX, this);			Util.debug("scale chosen Y" + MovieArray[pChosenIndex].scaleY, this);			Util.debug("name " +Util.getClassName(MovieArray[pChosenIndex]), this);						scaleChosen = Math.abs(MovieArray[pChosenIndex].scaleX)/2 + Math.abs(MovieArray[pChosenIndex].scaleY)/2 			scaleChosen *= Game2Data.scaleShapes[Util.getClassName(MovieArray[pChosenIndex])];							Util.debug("scale chosen after " + scaleChosen, this);									for (var i =  MovieArray.length - 1 ; i >= 0 ; i--)			{				if(i != pChosenIndex)				{					Util.debug("name " +Util.getClassName(MovieArray[i]), this);					scaleDistractor = Math.abs(MovieArray[i].scaleX)/2 + Math.abs(MovieArray[i].scaleY)/2					scaleDistractor*= Game2Data.scaleShapes[Util.getClassName(MovieArray[i])]					smallFactor = scaleChosen/scaleDistractor;					Util.debug("smallFactor " + smallFactor + MovieArray[i], this);					MovieArray[i] = Util.changeMovieSize(MovieArray[i], smallFactor);				}								if(Util.getClassName(MovieArray[i]) == "ThirtyRightTriangle")				{					Util.debug("q pexxxxxxx", this);					MovieArray[i].y += MovieArray[i].height/3; 									}			}						Util.debug("height is " + height);		}				public function makeDistractorsSmall(pChosenIndex : int)		{			//TODO : change heightxwidth to be the same			var needSmaller : Boolean = false;			var smallFactor : Number;						if(MovieArray[pChosenIndex].height < 100)			{				Util.debug("making distractors small", this);				for (var i =  MovieArray.length - 1 ; i >= 0 ; i--)				{					if(i != pChosenIndex)					{						smallFactor = MovieArray[pChosenIndex].height/MovieArray[i].height;						Util.debug("smallFactor " + smallFactor, this);						MovieArray[i] = Util.changeMovieSize(MovieArray[i], smallFactor);					}				}			}					}				public function checkSimilarSizeInPuzzle(pChosenIndex : int)		{			for (var i =  MovieArray.length - 1 ; i >= 0 ; i--)			{				if(i != pChosenIndex)				{					var shapesOfType : Array = g2.CurrentPuzzle.getShapesOfType(MovieArray[i].Type);					var scalesOfType = new Array(shapesOfType.length);					var average : Number; 										for(var i=0; i < shapesOfType.length; i++)					{						average += shapesOfType[i].scaleX + shapesOfType[i].scaleY; 							}										average = average/shapesOfType.length;				}			}					}						public function addShape(pShape : MovieClip)		{			pShape.Type = Util.getClassName(pShape);			add(pShape);		}			}}