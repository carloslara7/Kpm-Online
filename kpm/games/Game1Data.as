package com.kpm.games{		import com.kpm.common.*;	import com.kpm.kpm.BubbleId;	import com.kpm.kpm.EBName;	import com.kpm.kpm.EBStd;	import flash.events.TimerEvent;	import flash.utils.Timer;		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.geom.Point;		public class Game1Data extends GameData {		public var board : Object;						//Gameplay vars		public var gameTheme			: EGameCharacter;		public var playerAboveTarget	: int;		public var lvl_noArrowsVisible		: Boolean;			public var theme_EatedNamePlural : String;		public var theme_PlayerName 	: String;		public var theme_PlayerNamy 	: String;		public var theme_EatedName 		: String;		public var theme_PlayerFacing 	: Point2D;		public var theme_PlayerCenter 	: Point2D;		public var theme_PlayerScale  	: Number;		public var theme_TargetScale 	: Number;		public var theme_ObstacleNames 	: Array;		public var theme_ObstacleSizes 	: Array;		public var theme_MusicVolume	: Number;		public var theme_OtherTarget 	: String;								function Game1Data(pBubble : BubbleId, pLanguage : ELanguage, pGame : Game, pGameTheme : EGameCharacter)		{			Util.debug("Game1Data.Constructor " + pBubble + " " + pLanguage + " " + pGame);			super(pBubble, pLanguage, pGame);			gameId = EGame.G1;			gameTheme = pGameTheme;						soundLibrary.createLibrary(pLanguage, gameId, gameTheme, pBubble.Name);						setGameTheme();			setBoardData();			updateTaskVars();		}				function setGameTheme()		{			Util.debug("G1Data.setGameTheme");						switch(gameTheme)			{				case EGameCharacter.Frog : 										theme_OtherTarget = "LillyPad";					theme_PlayerName = "Frog";					theme_PlayerNamy = "Froggy";					theme_EatedName = "Fly";					theme_EatedNamePlural = "Flies";					theme_PlayerFacing = GameData.UP;					theme_PlayerCenter = new Point2D(1,0);					theme_PlayerScale = 1/275;					theme_TargetScale = 1/65;					theme_ObstacleNames = [EGameCharacter.Lake, EGameCharacter.Stone];					theme_ObstacleSizes = [new Point2D(3,1), new Point2D(2,1)];					theme_MusicVolume = 0.5;									break;								case EGameCharacter.Bee : 					theme_OtherTarget = "Hive";					theme_PlayerName = "Bee";					theme_PlayerNamy = "Bee";					theme_EatedName = "Flower";					theme_EatedNamePlural = "Flowers";					theme_PlayerFacing = GameData.LEFT;					theme_PlayerCenter = new Point2D(-3,7);					theme_PlayerScale = 1/65;					theme_TargetScale = 1/65;					theme_ObstacleNames = [EGameCharacter.BugSpray1, EGameCharacter.BugSpray2, EGameCharacter.FlyTrap1, EGameCharacter.FlyTrap2];					theme_ObstacleSizes = [new Point2D(1,1), new Point2D(1,2), new Point2D(1,1), new Point2D(1,2)];					theme_MusicVolume = 0.3;								break;				case EGameCharacter.Mouse : 					theme_OtherTarget = "Button";					theme_PlayerName = "Mouse";					theme_EatedName = "Cheese";					theme_EatedNamePlural = "Pieces of Cheese";					theme_PlayerNamy = "Mousy";					theme_PlayerFacing = GameData.LEFT;					theme_PlayerCenter = new Point2D(-4,1);					theme_PlayerScale = 1/65;					theme_TargetScale = 1/65;					theme_ObstacleNames = [EGameCharacter.Hole, EGameCharacter.Trap];					theme_ObstacleSizes = [new Point2D(1,1), new Point2D(2,1)];					theme_MusicVolume = 0.3;								break;								default : GameData.reportError("Player name not recognized");							}					}				function setBoardData()		{			switch(gameGoal.quality)			{				case EGoal.SPATIAL :					board_TileSize = 65;					board_NumRows = 8;					board_NumCols = 11;					board_PixelOffset = new Point2D(60,55);										break;									case EGoal.NUMBER : 				case EGoal.COLOR : 				case EGoal.SIZE :					board_TileSize = 145;					board_NumRows = 3;					board_NumCols = 6;					board_PixelOffset = new Point2D(60, 90)					break;								case EGoal.COUNT :					board_TileSize = 90;					board_NumRows = 6;					board_NumCols = 8;					board_PixelOffset = new Point2D(60,55);					break;								}						board = {tileSize	: board_TileSize, 					 numRows 	: board_NumRows, 					 numCols 	: board_NumCols, 					 Offset 	: board_PixelOffset};													}				public function get Feedback() : String		{							Util.debug("Game1Data.feedback " + state);						if(state == EState.GOOD_MOVE)			feedback = "Good Job!";									if(state == EState.END_ANIMATION)		feedback = "Good Job!";			if(state == EState.OK_MOVE)				feedback = "mmm...";				if(state == EState.COLLISION)			feedback = "You collided! start again!";				if(state == EState.OUT_OF_BOUNDS)		feedback = "You cannot move outside!";			if(state == EState.OUT_OF_MOVES)		feedback = "You took too long ! ";							if(state == EState.BAD_MOVE)			feedback = "Try again";			if(state == EState.PASS_FLY)			feedback = "Try again";				if(state == EState.TOO_MANY_ATTEMPTS)	feedback = "Too many tries!";						if(state == EState.INSTRUCTIONS)		feedback =  gameGoal.writtenPrompt;			if(state == EState.IDLE)				feedback =  gameGoal.writtenPrompt;			if(!feedback)				feedback = gameGoal.writtenPrompt;						game.tFeedbackText.text = feedback;						if(!feedback)				GameData.reportError("no feedback! no written prompt ?");							return feedback;												}						public function set Level(pLevel : uint)		{			Bubble.Level = pLevel;			updateTaskVars();			game.onTaskFinished(null);					}				public function get Level() : uint		{			return Bubble.Level;		}		private function updateTaskVars()		{			super.updateGoal();						lvl_noArrowsVisible = false;			lvl_LockForInstructions = false;				lvl_MaxAttempts = 0;			lvl_HidePlayer = false;			lvl_DefaultColor = false;			lvl_EatTarget = true;			lvl_ClickTarget = true;				lvl_TargetVertical = false;			lvl_TargetHorizontal	= false;			lvl_SpatialSense = false;			lvl_SpaceToCorner = 0;			lvl_MaxPerAxe = 10;			lvl_ClickOnGrid = false;							if(Bubble.Name.Text.indexOf("Numeral") != -1)				lvl_TargetMovieNames = [ENumberForm.Numeral];							else if(Bubble.Name.Text.indexOf("Finger") != -1)				lvl_TargetMovieNames = [ENumberForm.Finger];						else if(Bubble.Name.Text.indexOf("5Frame") != -1)				lvl_TargetMovieNames = [ENumberForm.FiveFrame];						else if(Bubble.Name.Text.indexOf("DiceDots") != -1)				lvl_TargetMovieNames = [ENumberForm.DiceDots];							else if(Bubble.Name.Text.indexOf("Mixed") != -1)			{				lvl_TargetMovieNames = [ENumberForm.Finger, ENumberForm.FiveFrame, ENumberForm.Numeral, ENumberForm.DiceDots];				gameGoal.numOptions = 10;								}						if(Bubble.Name.Standard == EBStd.SpatialSense)			{				if(Bubble.Level >= 1)				{					lvl_DefaultColor = true;					lvl_MaxAttempts = 3;					lvl_TargetHorizontal = false;					lvl_TargetVertical 	= true;				}							}							if(Bubble.Name.Text.indexOf("Identify") != -1 )			{				if(Bubble.Level >= 0)				{					//gameGoal = new Goal(EGoal.NUMBER, 3, 5);					//gameGoal.differentGoals = false;					lvl_MiddleTargetValue = 0;					gameGoal.numOptions = 3;					lvl_MinTargetValue = 1;					lvl_MaxTargetValue = 3;					lvl_MaxCorrectTargets = 1;					lvl_Prompt = "Click on ";					theme_TargetScale = 1/100;					lvl_InstructionsSoundName = "Identify";					lvl_ClickOnGrid = true;														}								if(Bubble.Level >= 1)				{					//gameGoal = new Goal(EGoal.NUMBER, 5, 8);					lvl_MaxTargetValue = 3;					lvl_MaxCorrectTargets = 2;					gameGoal.numOptions = 5;									}							if(Bubble.Level >= 2)				{					gameGoal.numOptions = 7;					lvl_MaxTargetValue = 5;					gameGoal.numOptions = 7;					//gameGoal = new Goal(EGoal.NUMBER, 7, 10)				}								if(Bubble.Level >= 3)				{					lvl_MaxTargetValue = 7;					lvl_MiddleTargetValue = 6;					gameGoal.numOptions = 10;					//gameGoal = new Goal(EGoal.NUMBER, 7, 10)				}								if(Bubble.Level >= 4)				{					lvl_MaxTargetValue = 10;					gameGoal.numOptions = 10;					lvl_MiddleTargetValue = 7;					lvl_MinTargetValue = 4;					//gameGoal = new Goal(EGoal.NUMBER, 7, 10)				}								if(Bubble.Level >= 5)				{					lvl_MaxTargetValue = 15;					lvl_MinTargetValue = 7;					lvl_MiddleTargetValue = 0;										gameGoal.numOptions = 7;					//gameGoal = new Goal(EGoal.NUMBER, 7, 10)				}								if(Bubble.Level >= 6)				{					lvl_MaxTargetValue = 20;					lvl_MinTargetValue = 10;					lvl_MiddleTargetValue = 0;					//gameGoal = new Goal(EGoal.NUMBER, 7, 10)				}							}  						if(gameGoal.quality == EGoal.COUNT)			{				lvl_OptionsMovieNames = Util.cloneArray(lvl_TargetMovieNames);				lvl_noArrowsVisible = true;				lvl_MaxCorrectTargets = 1;				lvl_Prompt = "How many ";				lvl_InstructionsSoundName = "Count";				lvl_HidePlayer = true;				lvl_AnimateEachTask = true;				lvl_MinTargetValue = 1;				lvl_TargetMovieNames = [theme_EatedName];				lvl_TargetScale = 1/210;				gameGoal.numCorrectOptions = 1;				lvl_MaxTargetValue = EBName.countNumber(Bubble.Name);									switch (lvl_MaxTargetValue) 				{					case 3 	: lvl_SubsetValue = 5; 	lvl_MiddleTargetValue = 0;  break;					case 5 	: lvl_SubsetValue = 9; 	lvl_MiddleTargetValue = 4;  break;					case 7 	: lvl_SubsetValue = 13; lvl_MiddleTargetValue = 6;  break;					case 10 : lvl_SubsetValue = 18; lvl_MiddleTargetValue = 6;  break;				}								if(Bubble.Name.Standard == EBStd.Numbers_Count)				{					gameGoal.numOptions = Math.min(lvl_MaxTargetValue, 5);					lvl_SubsetValue = 0;				}				else if(Bubble.Name.Standard == EBStd.Numbers_Subset)				{	 					gameGoal.numOptions = lvl_SubsetValue;					}								if(!(lvl_MaxTargetValue is Number) || lvl_MaxTargetValue <= 0)					 GameData.reportError("count max target value is not recognized " + lvl_MaxTargetValue + " " + lvl_SubsetValue);								Util.debug("max target value " + lvl_MaxTargetValue, this);								if (lvl_MaxTargetValue > 5)					lvl_SpaceToCorner = 1;				else					lvl_SpaceToCorner = 2;												if(Bubble.Name.Text.indexOf("Count") != -1)				{														switch(Bubble.Level){					            case 1:			                    lvl_DifferentScales = false;			                    lvl_DifferentColors = false;			                    lvl_TargetHorizontal = true;			                  	lvl_TargetVertical = false;			                    break;			            case 2:			                    lvl_DifferentScales = true;			                    lvl_DifferentColors = true;			                    lvl_TargetHorizontal = false;			                    lvl_TargetVertical = true;			                    break;			            case 3:			                    lvl_DifferentScales = false;			                    lvl_DifferentColors = false;			                    lvl_TargetHorizontal = false;			                    lvl_TargetVertical = false;			                    break;			            case 4:			                    lvl_DifferentScales = true;			                    lvl_DifferentColors = true;			                    lvl_TargetHorizontal = false;			                    lvl_TargetVertical = false;			                    break;					}				}				else				{					switch(Bubble.Level){					            case 1:			                   	lvl_DifferentScales = false;			                    lvl_DifferentColors = true;			                    gameGoal.subquality = EGoal.COLOR;			                    break;			            case 2:			                    lvl_DifferentScales = true;			                    lvl_DifferentColors = false;			                    gameGoal.subquality = EGoal.SIZE;			                    break;			            case 3:			                    lvl_DifferentScales = true;			                    lvl_DifferentColors = true;			                    gameGoal.subquality = EGoal.COLOR;			                    break;			            case 4:			                    lvl_DifferentScales = true;			                    lvl_DifferentColors = true;			                    gameGoal.subquality = EGoal.SIZE;			                    break;   					}   					   					lvl_NumOptions = Math.min(5, lvl_MaxTargetValue);   					   					   					if(gameGoal.subquality == EGoal.COLOR)   						lvl_SubjectsList = GameData.ecolors;   					else if (gameGoal.subquality == EGoal.SIZE)   						lvl_SubjectsList = GameData.esizes;   							   				   			}		 						}  						if(Bubble.Name.Standard == EBStd.Numbers_Count || Bubble.Name.Standard == EBStd.Numbers_Identify) 				lvl_DistractorList = generateENumbers(lvl_MinTargetValue, lvl_MiddleTargetValue, lvl_MaxTargetValue);						else if(Bubble.Name.Standard == EBStd.Numbers_Subset)			{				lvl_DistractorList = generateENumbers(lvl_MinTargetValue, lvl_MiddleTargetValue, lvl_MaxTargetValue);			}						if(Bubble.Name == EBName.SpatialSense)			{				//gameGoal = new Goal(EGoal.SPATIAL, 2, 4);												if(Bubble.Level >= 1)				{					lvl_SpaceToCorner = 3;					lvl_MaxCorrectTargets = 1;					lvl_ShowSmallArrows = true;					lvl_AnimateEachTask = true;					lvl_InstructionsSoundName = "SpatialSense";					lvl_Prompt = "Help " + theme_PlayerNamy + " catch the " + theme_EatedName ;					lvl_NumInstructions = 3;					lvl_ClickTarget = false;					lvl_SpatialSense = true;					lvl_MinDistPlayerTarget = 3;					lvl_MaxDistPlayerTarget = 5; 					lvl_ObstacleError 	= -1;					lvl_TargetHorizontal = false;					lvl_TargetVertical 	= true;					gameGoal.numOptions	= 1;									}								if(Bubble.Level >= 2)				{					lvl_TargetHorizontal = true;					lvl_TargetVertical 	= false;				}								if(Bubble.Level >= 3)				{							lvl_MinDistPlayerTarget = 6;					lvl_MaxDistPlayerTarget = 10; 					lvl_TargetHorizontal	= true;					lvl_TargetVertical	= true;					lvl_Obstacles 		= true					lvl_NumObstacles	= 1;					lvl_ObstacleError 	= 0;				}								if(Bubble.Level >= 4)				{					lvl_SpaceToCorner = 2;					lvl_LockForInstructions = true;					lvl_ShowPath	 	= true;					lvl_HoldPosition 	= true;					lvl_MinDistPlayerTarget = 8;					lvl_MaxDistPlayerTarget = 12;					lvl_InstructionsSoundName = "SpatialSensePath";					lvl_NumInstructions = 1;					lvl_ObstacleError 	= 25;									}								if(Bubble.Level >= 5)				{					lvl_SpaceToCorner = 1;					lvl_MinDistPlayerTarget = 9;					lvl_MaxDistPlayerTarget = 14;					lvl_NumObstacles = 3;				}			}			else if (Bubble.Name == EBName.VirtualPath)			{				if(Bubble.Level >= 1)				{					gameGoal.numOptions	= 1;										lvl_MaxCorrectTargets = 1;					lvl_ShowSmallArrows = true;					lvl_AnimateEachTask = true;					lvl_InstructionsSoundName = "SpatialSensePath";					lvl_Prompt = "Help " + theme_PlayerNamy + " catch the " + theme_EatedName ;					lvl_NumInstructions = 1;					lvl_ClickTarget = false;					lvl_SpatialSense = true;					lvl_MinDistPlayerTarget = 2;					lvl_MaxDistPlayerTarget = 3;					lvl_Obstacles = false;					lvl_NumObstacles 	= 0;					lvl_ObstacleError 	= 0;					lvl_HoldPosition 	= true;					lvl_ShowPath	 	= false;				}								if(Bubble.Level >= 2)				{					lvl_TargetHorizontal = true;					lvl_TargetVertical 	= false;				}								if(Bubble.Level >= 3)				{					lvl_SpaceToCorner = 2;					lvl_MinDistPlayerTarget = 5;					lvl_MaxDistPlayerTarget = 8;					lvl_MaxPerAxe = 6;					lvl_TargetHorizontal = true;					lvl_TargetVertical 	= true;				}								if(Bubble.Level >= 4)				{										lvl_MinDistPlayerTarget = 8;					lvl_MaxDistPlayerTarget = 16;					lvl_Obstacles = true;					lvl_NumObstacles 	= 1;					lvl_ObstacleError 	= 25;				}			}			else if (Bubble.Name == EBName.IdentifySpatial)			{								if(Bubble.Level >= 1)				{					lvl_SpaceToCorner = 4;					lvl_AnimateEachTask = true;					lvl_noArrowsVisible = true;					lvl_LockForInstructions = true;					lvl_SpatialSense = false;					lvl_Prompt 			= "Follow the path. Click on the " + theme_EatedName + " at the end of the path"					lvl_InstructionsSoundName = "SpatialSenseClick";					lvl_Obstacles 		= false;					lvl_MaxCorrectTargets = 1;					lvl_MaxTurnsInPath  = 4;					lvl_HoldPosition 	= false;					lvl_ShowSmallArrows = true;										gameGoal.numOptions = 3;					gameGoal.numCorrectOptions = 1;					lvl_SpatialDifference = 0;					lvl_MinDistPlayerTarget = 1;					lvl_MaxDistPlayerTarget = 4;					lvl_NumObstacles 	= 0;					lvl_ShowPath	 	= false;				}								if(Bubble.Level >= 2)				{					//gameGoal.numTargets = 2;					lvl_TargetHorizontal = true;					lvl_TargetVertical 	= false;				}								if(Bubble.Level >= 3)				{					lvl_SpatialDifference = 1;					lvl_MinDistPlayerTarget = 4;					lvl_MaxPerAxe = 6;					lvl_MaxDistPlayerTarget = 8;					lvl_TargetHorizontal = true;					lvl_TargetVertical 	= true;				}								if(Bubble.Level >= 4)				{					lvl_SpatialDifference = 2;					lvl_SpaceToCorner = 2;					gameGoal.numOptions = 4;					lvl_MinDistPlayerTarget = 7;					lvl_MaxDistPlayerTarget = 11;					lvl_MaxPerAxe = 8;													}			}			else if (Bubble.Name == EBName.IdentifyColor)			{				//gameGoal = new Goal(EGoal.COLOR, 5, 8)								if(Bubble.Level >= 1)				{					gameGoal.numOptions = 7;					lvl_InstructionsSoundName = "Identify";						lvl_MaxCorrectTargets = 2;					lvl_DifferentColors = true;					lvl_DifferentScales = false;						lvl_DistractorList = GameData.ecolors;					lvl_TargetMovieNames = [theme_OtherTarget];																	}								if(Bubble.Level >= 2)				{					lvl_DifferentScales = true;									}			}			else if (Bubble.Name == EBName.IdentifySize)			{				//gameGoal = new Goal(EGoal.COLOR, 5, 8)								if(Bubble.Level >= 1)				{					gameGoal.numOptions = 7;					lvl_InstructionsSoundName = "Identify";						lvl_MinCorrectTargets = 2;					lvl_MaxCorrectTargets = 4;					lvl_DifferentScales = true;					lvl_DifferentColors = false;					lvl_DistractorList = GameData.esizes;					lvl_TargetMovieNames = [theme_OtherTarget];														}								if(Bubble.Level >= 2)				{					lvl_DifferentColors = true;								}			}		}				public override function repeatQuestion(idleCounter : uint = 0)		{			trace("repeating question " + State.Text);			trace(game.playerMoveTimer);						if(!keysLocked && State != EState.END_ANIMATION && !game.playerMoveTimer)			{				trace("repeating question " + State.Text);                soundLibrary.repeatLastInstruction();                //setInstructions();				//SoundPlayer.forcePlaySoundFromQueue(false);				super.repeatQuestion(idleCounter);			}		}								public function setInstructions()		{			Util.debug("Game1Data.setInstructions" + gameGoal.taskCounter);            var additionalPrompt : String;						if(!soundLibrary) Util.debug("no sound library!");						if(Bubble.Name.Standard == EBStd.SpatialSense)			{                if(gameGoal.taskCounter == 0 && Bubble.Name == EBName.SpatialSense)                {                    soundLibrary.playLibSound(ESoundType.Instruction, "1", Language, EGame.G1, gameTheme, Bubble.Name);                    soundLibrary.playLibSound(ESoundType.Instruction, null, Language, EGame.G1, gameTheme, Bubble.Name);                }                else if(gameGoal.taskCounter > 2 && Bubble.Name == EBName.SpatialSense)                {                    if(Util.getRandBtw(0,10) > 5)                        soundLibrary.playLibSound(ESoundType.Instruction, "1", Language, EGame.G1, gameTheme, Bubble.Name);                    else                        soundLibrary.playLibSound(ESoundType.Instruction, null, Language, EGame.G1, gameTheme, Bubble.Name);                }                else                    soundLibrary.playLibSound(ESoundType.Instruction, null, Language, EGame.G1, gameTheme, Bubble.Name);				additionalPrompt = "";			}			else			if(Bubble.Name.Standard == EBStd.Numbers_Count)			{				soundLibrary.playLibSound(ESoundType.Instruction, null, Language, EGame.G1, gameTheme, EBStd.Numbers_Count);				additionalPrompt = theme_EatedNamePlural + " are there?" ;			}						else			if(Bubble.Name.Standard == EBStd.Numbers_Subset)			{				soundLibrary.playLibSound(ESoundType.Instruction, gameGoal.currentQuality, Language, EGame.G1, gameTheme, EBStd.Numbers_Subset);				additionalPrompt = gameGoal.currentQuality.Text + " " + theme_EatedNamePlural + " are there"; 			}									else if(Bubble.Name.Standard == EBStd.Numbers_Identify)			{				soundLibrary.playLibSound(ESoundType.InstructionClick, gameGoal.currentGoal, Language, null, null, EBStd.Numbers_Identify);				additionalPrompt = gameGoal.currentGoal.englishText;			}						else			{				if(Math.random() < 1/2)					soundLibrary.playLibSound(ESoundType.InstructionClick, gameGoal.currentGoal, Language, null, null, Bubble.Name);				else 					soundLibrary.playLibSound(ESoundType.InstructionClick, gameGoal.currentGoal, Language, EGame.G1, gameTheme, Bubble.Name);								additionalPrompt = gameGoal.currentGoal.Text;			}			//return;						Util.debug("Game1.setinstructions " + lvl_Prompt + " " + additionalPrompt); 			gameGoal.writtenPrompt = lvl_Prompt + additionalPrompt;						return;							//			Util.debug("giving instructions", this);//			Util.debug(gameGoal.quality, this);//			//			var soundName : String;//			//var eventString : String;//			var numOptions : Number ;//			var volume : Number;//			var sounds : Array = new Array();//			var additionalPrompt : String = ""; //			//eventString = GameData.INSTRUCTIONS_FINISHED//			soundName = "";//				//			if(gameGoal.quality == EGoal.COUNT)//			{//				additionalPrompt = theme_EatedNamePlural + " are there?" ;//				//				//if generating instructions for subset//				if(lvl_SubsetValue)//					additionalPrompt = gameGoal.currentQuality.Text + " " + additionalPrompt; //			}	//		//			else if(gameGoal.quality == EGoal.SPATIAL)//				additionalPrompt = "";//				//			else if(gameGoal.quality == EGoal.NUMBER)//				additionalPrompt = gameGoal.currentGoal.englishText;	//				//			else//				additionalPrompt = gameGoal.currentGoal.Text;	//				//			//			gameGoal.writtenPrompt = lvl_Prompt + additionalPrompt;//			//			//			if(Language == ELanguage.OBI)//			{//				Util.debug("Game1Data.setInstructions : nothing more to do if language is OBI");//				return;//			}//							//			if(gameGoal.quality == EGoal.SPATIAL)//				soundName += theme_PlayerName;//			//			soundName += GameData.INSTRUCTIONS;//			soundName += lvl_InstructionsSoundName;//			//			numOptions = 1;//			volume = 1;//			//			if(Bubble.Name.Standard == EBStd.SpatialSense)//			{ //				//				if(firstLevel && lvl_InstructionsSoundName == "SpatialSense")//					sounds.push(createSound(soundName + "Intro"));//					//				sounds.push(createSound(soundName));			//			}//			//			else if (gameGoal.quality == EGoal.NUMBER)//			{//				sounds.push(createSound(soundName, 2));//				sounds.push(createSound("NUMBER"+ gameGoal.currentGoal.Text));//			}//			//			else if (gameGoal.quality == EGoal.COUNT)//			{//				sounds = generateInstructionsCount(soundName, gameGoal.subquality);//			}//			 //			else if(gameGoal.quality == EGoal.SIZE || gameGoal.quality == EGoal.COLOR)//			{//				sounds = generateInstructionsIdentify(soundName, gameGoal.quality);//				Util.debug("prompt " + gameGoal.writtenPrompt);//			}//			//			Util.debug(gameGoal.writtenPrompt, this);//			//			State = EState.INSTRUCTIONS;//			Util.printArray(sounds);//			sounds[sounds.length - 1].eventString = KpmSound.INSTRUCTIONS_FINISHED;//			//			//!! event???//			Util.debug("eventx " + sounds[sounds.length - 1].eventString);//			for(var i=0; i < sounds.length; i++)//			{//				Util.debug("adding " + sounds[i], this);//				SoundPlayer.pushSound(sounds[i]);//			}		}				public function generateInstructionsCount(name : String, pQuality : EGoal) : Array		{			if(lvl_SubsetValue)				var sounds : Array = new Array(4);			else				var sounds : Array = new Array(3);							var numQualities : int = 0;			var adj : uint = 0;			var sus : uint = 1;			var genre : String = "";			var number : String = "";						if(pQuality)			{				Util.debug("pquality " + pQuality);				numQualities = 1;								if(Language == ELanguage.SPA){					adj = 1;					sus = 0;				} else {					adj = 0;					sus = 1;				}			}						 						sounds[numQualities+2] = createSound(name + "B", 2);						if(Language == ELanguage.SPA) 			if(theme_PlayerName == EGameCharacter.Frog.Text || theme_PlayerName == EGameCharacter.Bee.Text)				genre = "Fem";							sounds[0] = createSound(name + genre + "A", 1);			sounds[numQualities+sus] = createSound(theme_EatedNamePlural);						if(Language == ELanguage.SPA) {				number = "Plural";			}						//For subset quality : big, small, red, blue...			if(numQualities > 0)				sounds[numQualities+adj] = createSound(gameGoal.currentQuality.Text + genre + number);													return sounds;					}				public function generateInstructionsIdentify(name1 : String, pQuality : EGoal)		{			var sounds : Array = new Array();			var name2 = gameGoal.currentQuality.Text;			lvl_NumInstructions = 2;						if(Language == ELanguage.SPA) {				if(pQuality == EGoal.SIZE)					name2+= lvl_TargetMovieNames[0];												else 				{					if(Util.getRandBtw(0,1) == 1)					{						name1 += "Color" + lvl_TargetMovieNames[0];						lvl_NumInstructions = 0;						if(theme_PlayerName == EGameCharacter.Frog.Text)							name2 += "Fem";					}					else					{						name2 = pQuality.Text + gameGoal.currentQuality.Text;					}				}									sounds.push(createSound(name1, lvl_NumInstructions));				sounds.push(createSound(name2));						}						if(Language == ELanguage.ENG) {				sounds.push(createSound(name1, 2));								if(Util.getRandBtw(0,1) == 1) 					name2+= lvl_TargetMovieNames[0];							sounds.push(createSound(name2));			}						return sounds;		}				public function PathTooBig() : Boolean		{			var tooBig : Boolean = gameGoal.lengthPath > 0 && gameGoal.lengthPath > gameGoal.lengthOptimalPath*2;			Util.debug("too big " + tooBig); 			return tooBig;		}		//		function waitAndPlaySound(pWait : int, pSoundType : ESoundType, pAttribute : Object)//		{//			Util.debug("Wait for " + pWait + " microseconds and play type attribute " + pSoundType + " " + pAttribute);//			playSoundTimer = new Timer(pWait , 1);//			playSoundTimer.start();//			playSoundTimer.addEventListener(TimerEvent.TIMER, playSound, pSoundType, pAttribute);//		}//				public function needAnimation() : Boolean		{			//Util.debug("need animation", this);			//Util.debug(lvl_AnimateEachTask + " " + gameGoal.isBubbleComplete() + " " + gameGoal.isBubbleFailed(), this)			if(lvl_EatTarget && (lvl_AnimateEachTask || isBubbleFinished()))				return true;							return false;					}	}	}