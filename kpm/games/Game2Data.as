package com.kpm.games{		import com.kpm.common.*;	import com.kpm.kpm.BubbleId;	import com.kpm.kpm.EBName;		import flash.events.Event;						public class Game2Data extends GameLib {		var shapeSuccessCounter				: uint = 0;		var puzzleNames						: Array;		var puzzlesDone						: Array;				//shapes between 1+lvl_size1, 1+lvl_size1+lvl_size2 and 1-lvl_size1, 1-lvl_size1-lvl_size2		var lvl_size1 		: Number = 0.15;		var lvl_size2 		: Number = 0.1;				public var optionsList				: Object;		public var numbersList				: Object;		public var firstShape				: Boolean = true;		public var options_x 				: int;		public var distractorType			: int;						public static var game2Shapes, simShapes, scaleShapes		: Array ;		public var puzzlePosition 									: Point2D ;		public var options_y										: int = 37;				public static const OPTIONS_MAX_HEIGHT 		: uint = 500;							public const OPTIONS_BETWEEN_DISTANCE	 	: Point2D = new Point2D(0,30);		public const OPTIONS_MIN					: Point2D = new Point2D(0,110);		public const OPTIONS_MAX					: Point2D = new Point2D(250,210);				public const OPTIONS_MAX_DISTRACTORS_HEIGHT	: uint = 140;						const COUNTER_FIXED_SIZE			: Point2D = new Point2D(100,105);		const NUMBERS_LIST_SIZE				: Point2D = new Point2D(270,600);		const NUMBERS_Y						: int = 80;		const SCREEN_SIZE 					: Point2D = new Point2D(1000,600);		const SHAPES_SIZE					: Point2D = new Point2D(718,600);		const numRepetitions				: uint = 1;						function Game2Data(pBubble : BubbleId, pLanguage : ELanguage, pGame : Game)		{			super(pBubble, pLanguage, pGame);									updateTaskVars();						populatePuzzleNames();			soundLibrary.createLibrary(pLanguage, gameId, null, pBubble.Name);														optionsList = {	between 				: OPTIONS_BETWEEN_DISTANCE, 						   	max					  	: OPTIONS_MAX,						   	position				: new Point2D(SCREEN_SIZE.x - OPTIONS_MAX.x/2 - 30, options_y),							min 					: OPTIONS_MIN,							maxDistractorHeight 	: OPTIONS_MAX_DISTRACTORS_HEIGHT};										numbersList = { fixed 					: COUNTER_FIXED_SIZE,							position 				: new Point2D(SCREEN_SIZE.x - NUMBERS_LIST_SIZE.x/2 - 60, NUMBERS_Y) };  						game2Shapes =  			["Square", "MRectangle", "Circle", "Hexagon", "ObtuseIsoTriangle", 			 "Oval", "Parallelogram","Pentagon", "ThirtyRightTriangle", "Trapezoid", "Triangle"]						//Each element in simShapes contains the candidate distractors for each shape			simShapes = new Array(30);			simShapes["Square"] = ["Square", "MRectangle", "Parallelogram"];			simShapes["MRectangle"] = simShapes["Parallelogram"] = simShapes["Square"];			 			simShapes["Circle"] = ["Circle", "Hexagon", "Oval", "Pentagon"];			simShapes["Hexagon"] = simShapes["Oval"] = simShapes["Pentagon"] = simShapes["Circle"]; 						simShapes["Trapezoid"] = ["Trapezoid", "Trapezoid2", "Trapezoid4"];			simShapes["Trapezoid2"] = simShapes["Trapezoid4"] = simShapes["Trapezoid"];						simShapes["Triangle"] = ["Triangle", "AcuteIsoTriangle", "ObtuseIsoTriangle", "RightTriangle", "ThirtyRightTriangle"];			simShapes["ObtuseIsoTriangle"] = simShapes["Triangle"] ;			simShapes["RightTriangle"] = simShapes["Triangle"] ;						simShapes["AcuteIsoTriangle"] = ["Triangle", "AcuteIsoTriangle", "ObtuseIsoTriangle", "RightTriangle"];			simShapes["ThirtyRightTriangle"] = ["Triangle", "ObtuseIsoTriangle", "ThirtyRightTriangle", "RightTriangle"];			scaleShapes = new Array(30);						//scaleShapes contains a heuristic aproximation of the area of the shape			//this number is used to compute the size the distractor shapes should be to match			//the area of the clicked shape			scaleShapes["Hexagon"] 				= 0.25;			scaleShapes["Circle"] 				= 0.35;			scaleShapes["Trapezoid4"] 			= 0.3;			scaleShapes["RightTriangle"]		= 0.5;			scaleShapes["Square"] 				= 0.6;			scaleShapes["Trapezoid2"] 			= 0.7;			scaleShapes["Triangle"] 			= 0.7;			scaleShapes["Pentagon"] 			= 0.75;			scaleShapes["AcuteIsoTriangle"] 	= 0.7;			scaleShapes["ThirtyRightTriangle"] 	= 0.8;			scaleShapes["Trapezoid"]  			= 0.75;			scaleShapes["MRectangle"] 			= 0.8;			scaleShapes["ObtuseIsoTriangle"]	= 0.8;			scaleShapes["Oval"] 				= 0.9;			scaleShapes["Parallelogram"] 		= 0.95;		 						}				function populatePuzzleNames()		{			puzzleNames = new Array();			puzzlesDone = new Array();									puzzleNames[1] = [  EPuzzle.TrainPuzzle, EPuzzle.MousePuzzle, 								EPuzzle.CastlePuzzle, EPuzzle.LadybugPuzzle, EPuzzle.PandaPuzzle];								//puzzleNames[4] = [	EPuzzle.LizardPuzzle ];											puzzleNames[2] = [ 	EPuzzle.BicyclePuzzle, EPuzzle.PearPuzzle, EPuzzle.FoxPuzzle, 								EPuzzle.CatPuzzle, EPuzzle.SealPuzzle];											//puzzleNames[3] = [EPuzzle.RocketPuzzle];								puzzleNames[3] = [EPuzzle.RocketPuzzle, EPuzzle.IceCreamPuzzle, EPuzzle.RocketPuzzle, EPuzzle.DogPuzzle,							  EPuzzle.LionPuzzle, EPuzzle.OwlPuzzle, EPuzzle.ClownPuzzle, EPuzzle.AngelFishPuzzle,							  EPuzzle.BarnPuzzle];											puzzleNames[4] = [	EPuzzle.LizardPuzzle , EPuzzle.BoatPuzzle, EPuzzle.PenguinPuzzle, 							EPuzzle.BunnyPuzzle, EPuzzle.TreePuzzle];													puzzleNames[5] = [EPuzzle.PlanePuzzle,   EPuzzle.BirdPuzzle, EPuzzle.TurtlePuzzle, EPuzzle.FlowerPuzzle, 								EPuzzle.PlanePuzzle, EPuzzle.ElephantPuzzle];					puzzleNames[6] =  puzzleNames[1].concat(puzzleNames[2], puzzleNames[3], puzzleNames[4], puzzleNames[5]); 																		if(Bubble.Name == EBName.IdentifyShape)			{				puzzleNames[2] = puzzleNames[1].concat(puzzleNames[2]);				puzzleNames[6] =  puzzleNames[2].concat(puzzleNames[3], puzzleNames[4], puzzleNames[5]);															}			else if(!this.lvl_PlaceShape)			{				puzzleNames[4].push(EPuzzle.ButterflyPuzzle);				puzzleNames[3].push(EPuzzle.HorsePuzzle);			}						if(Bubble.Name == EBName.IdentifyColor)			{				puzzleNames[1].push(EPuzzle.BicyclePuzzle, EPuzzle.PearPuzzle, EPuzzle.FoxPuzzle, 										EPuzzle.CatPuzzle, EPuzzle.SealPuzzle);				puzzleNames[2] = [	EPuzzle.RocketPuzzle, EPuzzle.IceCreamPuzzle, EPuzzle.DogPuzzle,									EPuzzle.LionPuzzle, EPuzzle.OwlPuzzle, EPuzzle.ClownPuzzle, EPuzzle.AngelFishPuzzle,										EPuzzle.HorsePuzzle, EPuzzle.BarnPuzzle];						}																													}						public function get Feedback() : String		{				if(state == EState.NEW_GAME)			feedback = "let's start playing";				if(state == EState.GOOD_MOVE)			feedback = "Good Job!";									if(state == EState.BAD_MOVE)			feedback = "Try again";				if(state == EState.END_ANIMATION)		feedback = "You won ! ";	 			if(state == EState.INSTRUCTIONS)		feedback = gameGoal.writtenPrompt;						if(feedback == null)				Util.debug("feedback " + state.Text, this);							return feedback;												}				function getNextPuzzle() : String 		{			GameLib.driver ? puzzlesDone.push(GameLib.driver.lastAssemblePuzzle) : null ;						Util.debug("G2Data.getNextPuzzle : level puzzle is  " + lvl_PuzzleIndex);			var puzzle : EPuzzle = 			Util.getRandomElementNotIn(puzzleNames[lvl_PuzzleIndex], puzzlesDone) as EPuzzle;						//TODO change this			puzzlesDone.push(puzzle);						GameLib.driver ? GameLib.driver.lastAssemblePuzzle = puzzle : null;						return puzzle.Text;		}				public function set Level(pLevel : uint)		{			Bubble.Level = pLevel;			updateTaskVars();		}				public override function repeatQuestion(idleCounter : uint = 0)		{					Util.debug("repeat question" + State);									if(!keysLocked && State != EState.END_ANIMATION)			{				Util.debug("repeat question");                soundLibrary.repeatLastInstruction();				//setInstructions();				super.repeatQuestion(idleCounter);							}					}				function setInstructions() 		{			Util.debug("G2Data.setInstructions");			gameGoal.writtenPrompt = lvl_Prompt;						if(!soundLibrary) Util.debug("no sound library!");			if(Bubble.Name == EBName.MatchShape)				soundLibrary.playLibSound(ESoundType.Instruction, null, Language, EGame.G2, null, Bubble.Name);						else			if(Bubble.Name == EBName.IdentifyShape || Bubble.Name == EBName.IdentifyColor)			{				gameGoal.writtenPrompt += gameGoal.currentGoal.Text;				soundLibrary.playLibSound(ESoundType.InstructionClick, gameGoal.currentGoal, Language, null, null, Bubble.Name, GameLib.INSTRUCTIONS_FINISHED);			}						else			if(Bubble.Name == EBName.PlaceShapeA || Bubble.Name == EBName.PlaceShapeB || Bubble.Name == EBName.PlaceShapeC )				soundLibrary.playLibSound(ESoundType.Instruction, "PlaceShape", Language, EGame.G2);																				State = EState.INSTRUCTIONS;			//			var sounds : Array = new Array();//			if(Bubble.Name == EBName.IdentifyShape)//			{//				//				if(Language == ELanguage.ENG)//				{//					sounds.push(createSound(GameData.INSTRUCTIONS+"Identify", 2));//					sounds.push(createSound(gameGoal.currentGoal.Text +"0"));//				}//				else//				{//					sounds.push(createSound(GameData.INSTRUCTIONS + "IdentifyOne1", 1, 1.5));//					sounds.push(createSound(gameGoal.currentGoal.Text+"1", 1, 1.5, true, true));//				}//			}//			//			else if (Bubble.Name == EBName.IdentifyColor)//			{//				gameGoal.writtenPrompt += gameGoal.currentGoal.Text;//				//				if(Language == ELanguage.ENG)//				{//					sounds.push(createSound(GameData.INSTRUCTIONS+"Identify", 2));//					sounds.push(createSound(gameGoal.currentGoal.Text));//				}//				else//				{//					sounds.push(createSound(GameData.INSTRUCTIONS+"Identify", 2));//					sounds.push(createSound("COLOR"+gameGoal.currentGoal.Text));//					//				}//				//			}//			//			else if(Bubble.Name == EBName.MatchShape && firstShape)//			{	//				if(firstLevel) //				{//					sounds.push(createSound(lvl_InstructionsSoundName+"Intro", 1, 1, true, true));//					sounds.push(createSound(lvl_InstructionsSoundName+"1", 1, 1, true, true));//				}//				else 	//				{			//					sounds.push(createSound(lvl_InstructionsSoundName, 4, 1, true, true));					//				}//									   //				firstShape = false;//			}//			else if(lvl_PlaceShape && firstShape)//			{	//				sounds.push(createSound(lvl_InstructionsSoundName, 1));					//				firstShape = false;//			}			//!! Events!//			if(sounds.length > 0)//				sounds[sounds.length - 1].eventString = KpmSound.INSTRUCTIONS_FINISHED;//			//			for(var i=0; i < sounds.length; i++)//			{//				Util.debug("adding " + sounds[i], this);//				SoundPlayer.pushSound(sounds[i]);//			}								}				function updateTaskVars()		{				super.updateGoal();			lvl_PuzzleIndex = Bubble.Level;			lvl_PlaceShape = false;						Util.debug("G2Data.updateTaskVars " + Bubble);										if(Bubble.Name == EBName.MatchShape)			{																	if(Bubble.Level >= 1)				{					lvl_MatchShape = true;										lvl_Prompt = "Click on a shape and drag it to its correct place";					this.lvl_DistractorType = Game2ShapeList.DISTRACTORS_ANY_ALLOWED_TYPE;					lvl_InstructionsSoundName = GameLib.INSTRUCTIONS + Bubble.Name.Text;					lvl_DistractorRotation = false;					gameGoal.numOptions = 3;					gameGoal.numCorrectOptions = 1;				}								if(Bubble.Level >= 4)				{					lvl_PuzzleIndex = 3;					lvl_DistractorRotation = true;				}								if(Bubble.Level >= 5)				{					lvl_PuzzleIndex = 3;					this.lvl_DistractorType = Game2ShapeList.DISTRACTORS_SIMILAR_TO_ANSWER;				}				if(Bubble.Level >= 6)				{					lvl_PuzzleIndex = Bubble.Level - 2;				}			}			else if (Bubble.Name == EBName.IdentifyShape)			{				//gameGoal = new Goal(EGoal.SHAPE, 5, 10);								if(Bubble.Level >= 1)				{					lvl_PuzzleIndex = Bubble.Level + 1;					lvl_InstructionsSoundName = "IdentifyOne";					lvl_ClickShape = true;					lvl_Prompt = "Click on a ";					lvl_ClickShape = true;									}								if(Bubble.Level >= 2)				{					lvl_DistractorRotation = true;									}			}			else if (Bubble.Name == EBName.IdentifyColor)			{				//gameGoal = new Goal(EGoal.COLOR, 5, 8);												if(Bubble.Level >= 1)				{					lvl_InstructionsSoundName = "IdentifyColor";					lvl_ClickShape = true;					lvl_ClickColor = true;					lvl_Prompt = "Click on ";				}			}									else if(this.Bubble.Name == EBName.PlaceShapeA)			{								if(Bubble.Level >= 1)				{					lvl_InstructionsSoundName = GameLib.INSTRUCTIONS + "PlaceShape";					lvl_Prompt = "Choose a shape to put in the puzzle ";					lvl_DistractorRotation = false;					lvl_PlaceShape = true;					this.lvl_DistractorType = Game2ShapeList.DISTRACTORS_IN_PUZZLE;				}				if(Bubble.Level >= 4)				{					lvl_PuzzleIndex = 3;					lvl_DistractorRotation = true;				}				if(Bubble.Level >= 5)				{					lvl_PuzzleIndex = 3;				}								if(Bubble.Level >= 6)				{					lvl_PuzzleIndex = Bubble.Level - 2;				}			}						else if(this.Bubble.Name == EBName.PlaceShapeB)			{				if(Bubble.Level >= 1)				{					lvl_InstructionsSoundName = GameLib.INSTRUCTIONS + "PlaceShape";					lvl_Prompt = "Choose a shape to put in the puzzle ";					lvl_DistractorRotation = false;					lvl_PlaceShape = true;					this.lvl_DistractorType = Game2ShapeList.DISTRACTORS_ANY_ALLOWED_TYPE;									}				if(Bubble.Level >= 4)				{					lvl_PuzzleIndex = 3;					lvl_DistractorRotation = true;				}								if(Bubble.Level >= 5)				{					lvl_PuzzleIndex = 3;					this.lvl_DistractorType = Game2ShapeList.DISTRACTORS_SIMILAR_TO_ANSWER;				}				if(Bubble.Level >= 6)				{					lvl_PuzzleIndex = Bubble.Level - 2;				}								Util.debug("lvl_PlaceShape ? " + lvl_PlaceShape);							}						else if(this.Bubble.Name == EBName.PlaceShapeC)			{								if(Bubble.Level >= 1)				{					lvl_InstructionsSoundName = GameLib.INSTRUCTIONS + "PlaceShape";					lvl_Prompt = "Choose a shape to put in the puzzle ";					lvl_DistractorRotation = false;					lvl_PlaceShape = true;					this.lvl_DistractorType = Game2ShapeList.DISTRACTORS_SIMILAR_TO_PUZZLE;				}				if(Bubble.Level >= 4)				{					lvl_PuzzleIndex = 3;					lvl_DistractorRotation = true;				}				if(Bubble.Level >= 5)				{					lvl_PuzzleIndex = 3;				}								if(Bubble.Level >= 6)				{					lvl_PuzzleIndex = Bubble.Level - 2;					lvl_size1 = 0.1;					lvl_size2 = 0.05;				}												Util.debug("rotation ? " + lvl_DistractorRotation + " " + Bubble.Level);			}															else throw new Error("bubble not suported !!!!!!!" + Bubble, this);					}	}}