package com.kpm.kpm{	import com.kpm.common.KpmIO;	import com.kpm.common.MovieList;	import com.kpm.common.Point2D;	import com.kpm.common.Util;	import com.kpm.reporter.excel.Kid;	import com.kpm.reporter.excel.Reporter;	import com.kpm.ui.*;		import fl.controls.RadioButton;		import flash.display.Bitmap;	import flash.display.DisplayObject;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.InvokeEvent;	import flash.events.MouseEvent;	import flash.filesystem.*;	import flash.geom.Point;    import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.system.ApplicationDomain;    import flash.system.LoaderContext;	import flash.text.TextField;		public class ClassPage extends UIPage	{				public const MAX_KIDS_PER_CLASS : uint = 35;				public const ROWS 		: uint = 4;		public const COLS 		: uint = 7;		public const MATRIX_POS	: Point2D = new Point2D(40,80);		public const imageSize 	: uint = 88;		public const space 		: uint = 60;				var mPicLoaders 		: Array = new Array();		var mPicMovies			: Array = new Array();		var mKidCols			: Array = new Array();		var mKidNames_mc		: MovieList ;		var mBuildDir 			: KpmIO = new KpmIO();		var selectedKids		: Array = new Array();						var imagesLoaded  	: uint = 0;		var imagesToLoad  	: uint = 0;		var clickedKidId 	: String ;		var feedback		: TextField;				var excelreporter	: Reporter;								public function ClassPage()		{			super(UIConst.ClassPage);			//teacherReport_Bt.addEventListener(MouseEvent.CLICK, teacherReport_Click);			tIndividualReport_Bt.addEventListener(MouseEvent.CLICK, individualReport_Click);			tSelectAll_Bt.addEventListener(MouseEvent.CLICK, selectAll_Click);			newPlayer_Bt.addEventListener(MouseEvent.CLICK, showKidCreator);			editPlayer_Bt.addEventListener(MouseEvent.CLICK, showKidEditor);			excelReport_Bt.addEventListener(MouseEvent.CLICK, generateExcelReport);            excelReportInfo_Bt.addEventListener(MouseEvent.CLICK, openExcelInfo);			tDeleteKid_Bt.addEventListener(MouseEvent.CLICK, showConfirmDelete);			tConfirmDelete_Page.Yes_Bt.addEventListener(MouseEvent.CLICK, doDeleteKid)			tConfirmDelete_Page.No_Bt.addEventListener(MouseEvent.CLICK, cancelDeleteKid)			tNextClass_Bt.addEventListener(MouseEvent.CLICK, onNextClass_Click);            webReport_Bt.addEventListener(MouseEvent.CLICK, webReport_Click)			//DriverData.selectedKidId = ""; 					}				//Display array of selectable images		public override function showPage(e : Event = null)		{			Util.debug("ClassPage.showPage");            if(DriverData.Driver.iOS || DriverData.Driver.Android)            {                excelReport_Bt.visible = true;                excelReportInfo_Bt.visible = true;            }            resetImages();			tNextClass_Bt.visible = DriverData.configXML.classes.children().length() > 1;			DriverData.getInstance().removeEventListener("endOfParsing", showPage);			DriverData.getInstance().removeEventListener("noKids", showPage);						var className : String = "";			if (DriverData.configXML.classes.children().length() > 1)				className = DriverData.configXML.classes.children().(@id == DriverData.configXML.classes.@currentId)[0].@name;							tWelcome.text = "Manage " + className + " class ";			mPicLoaders = new Array(COLS*ROWS)			mPicMovies = new Array(COLS*ROWS);			mKidCols = new Array(COLS);						mBuildDir.setFilePath(DriverData.getKidFolder());			mBuildDir.listDirectory();						mBuildDir.addEventListener(KpmIO.DIR_LIST_COMPLETE, readImages, false, 0 , true);						var mKidMatrix_ml : MovieList;			for(var i =0; i < COLS; i++)			{				mKidMatrix_ml = new MovieList(false, 50, imageSize + 20, null, null, COLS + 1);				mKidMatrix_ml.init();				addChild(mKidMatrix_ml);				mKidCols[i] = mKidMatrix_ml;								Util.debug("adding " + mKidMatrix_ml + " to " + mKidCols[i] + " at " + i);							}						tConfirmDelete_Page.visible = false;			super.showPage();									}				//Display the clickable images from next class		function onNextClass_Click(e : Event)		{			Util.debug("ClassPage.onNextClassClick");			DriverData.getInstance().addEventListener("endOfParsing", showPage);			DriverData.getInstance().addEventListener("noKids", showPage);			DriverData.getInstance().selectNextClass();			DriverData.getInstance().reloadKidsProfileInfo1();								}						function resetImages()		{			removeKidImages();					}				function readImages(e : Event)		{						var currentKidId 		: String;			var i : uint = 0;			var imageMovie : MovieClip ;			var imageIO : KpmIO;			var oneName : Boolean  = false;						imagesToLoad = 0;			imagesLoaded = 0;						Util.debug("ClassPage.readImages");			mBuildDir.removeEventListener(KpmIO.DIR_LIST_COMPLETE, readImages);									for each ( var currentPath : String in mBuildDir.mFileList)			{								currentKidId = DriverData.getFolderName(currentPath);								Util.debug("reading images "+ currentPath, this);				Util.debug(currentKidId.length);				Util.debug("current kid " + currentKidId);								//if valid folder for reading...				if(DriverData.validKidFolder(currentKidId))				{					oneName = true;																				//try					//{						imageIO = new KpmIO();						imageIO.setFilePath(DriverData.getKidFolder(currentKidId) + ".jpg");												if(!imageIO.exists())							throw new Error();						else						{							i++; imagesToLoad++;							mPicLoaders[i] = new Loader();							Util.debug("loading " + imagesToLoad);														var request : URLRequest = 							new URLRequest("file:///" + KpmIO.DEFAULT_LOCATION.nativePath + "/" + DriverData.getKidFolder(currentKidId) + ".jpg");							   							Util.debug(request.url, this);												   	var context:LoaderContext = new LoaderContext(false, ApplicationDomain.currentDomain);  						   								mPicLoaders[i].load(request, context);							mPicLoaders[i].contentLoaderInfo.addEventListener(Event.COMPLETE, finishLoadingImage);							imageMovie = new KpmAvatar();							imageMovie.image.addChild(mPicLoaders[i]);													Util.debug("kids info");							for (var p in DriverData.kidsInfo)							{								Util.debug(p);							}														if(DriverData.kidsInfo[currentKidId])								imageMovie.tName.text = DriverData.kidsInfo[currentKidId].firstName() + " " + DriverData.kidsInfo[currentKidId].lastName();							else								imageMovie.tName.text = "";															imageMovie.id = currentKidId;							imageMovie.addEventListener(MouseEvent.CLICK, onImageClick);							imageMovie.buttonMode = true;												Util.debug("placing " + imageMovie + " in " + (int(i/COLS)));							mKidCols[int((i-1)/COLS)].add(imageMovie);							mKidCols[int((i-1)/COLS)].visible = false;						}					//}					//catch (e: Error)					//{						//throw new Error();					//	i--; imagesToLoad--;					//}																			}			}						if(!oneName)				UIGod.feedback("Class Page : No players in this class. Login as teacher to create kids");													}								function finishLoadingImage(e : Event)		{			imagesLoaded++;						var bm : Bitmap = Bitmap(e.target.loader.content);			bm.smoothing = true;			var col : MovieList;						//if(imagesLoaded >= imagesToLoad)			//{				for(var i =0; i < COLS; i++)				{					col = mKidCols[i];					col.visible = true;					col.x = MATRIX_POS.x;					col.y = MATRIX_POS.y + i*(imageSize + space);											for(var j=0; j < col.Rows.length; j++)					{						col.Rows[j].image.height = imageSize;						col.Rows[j].image.width = imageSize;											}				}			//}					}				function onImageClick( e : Event)		{						if(e.currentTarget.currentFrame == 1)			{				//blankAllImages();				e.currentTarget.gotoAndPlay(2);				//DriverData.selectedKidId = e.currentTarget.id;			}			else			{				e.currentTarget.gotoAndPlay(1);				//DriverData.selectedKidId = "";			}									}				public function getSelectedKids() : Array		{			var col : MovieList;			selectedKids = new Array();						for(var i =0; i < COLS; i++)			{				col = mKidCols[i];				for(var j=0; j < col.Rows.length; j++)				{					if(col.Rows[j].currentFrame == 2)						selectedKids.push(col.Rows[j].id);									}			}						Util.debug("get selected kids " + selectedKids.length);						return selectedKids;		}				function blankAllImages()		{			var col : MovieList;			for(var i =0; i < COLS; i++)			{				col = mKidCols[i];				for(var j=0; j < col.Rows.length; j++)				{					if(col.Rows[j].currentFrame == 2)						col.Rows[j].gotoAndPlay(1);									}			}		}				function removeKidImages()		{			for(var j =0; j < COLS; j++) 				Util.removeChild(mKidCols[j]);		}				function individualReport_Click( e : Event)		{			if(getSelectedKids().length != 1)				UIGod.feedback("Need to select one kid!");			container.CurrentPage = UIConst.PdfReporterPage;		}        function webReport_Click (e : Event)        {            if(getSelectedKids().length != 1)                UIGod.feedback("Need to select one kid!");            var webReportURL = "http://kidsplaymath.org/data/logs/dbBB.html?"+ DriverData.kidsInfo[getSelectedKids()[0]].firstName() + " " + DriverData.kidsInfo[getSelectedKids()[0]].lastName();//            if(DriverData.Driver.iOS || DriverData.Driver.Android)//            {//                var wb = new StageWebView();//                wb.stage = DriverData.Driver.stage;//                wb.viewPort = new Rectangle(10,0,1200,760);//specify the clipping mask(x,y,w,h)//                wb.loadURL( webReportURL );//            }//            else             navigateToURL(new URLRequest(webReportURL));        }			function selectAll_Click( e : Event)		{			var col : MovieList;			for(var i =0; i < COLS; i++)			{				col = mKidCols[i];				for(var j=0; j < col.Rows.length; j++)					col.Rows[j].gotoAndStop(2)			}			}				function showKidCreator( e :Event)		{			DriverData.createKid = true;			container.CurrentPage = UIConst.KidCreatorPage;		}				function showKidEditor( e :Event)		{			if(getSelectedKids().length == 1) 			{				DriverData.createKid = false;				container.CurrentPage = UIConst.KidCreatorPage;			}			else				UIGod.feedback("Need to select one kid!");								}		public function generateExcelReport(e : Event = null)		{			var inputReporter : String =  KpmIO.DEFAULT_LOCATION.nativePath + "//" + DriverData.getKidFolder();			var outputReporterFile : File = File.documentsDirectory.resolvePath(DriverData.FOLDER_REPORTS + "/ClassReports");						var className :  String = DriverData.configXML.classes.children().(@id == DriverData.configXML.classes.@currentId)[0].@name;			excelreporter = new Reporter(inputReporter, outputReporterFile.nativePath, className + "_FullDataReport_" + Util.getFirstLetters(DriverData.configXML.teacherName, 2) + "_" + Util.getTodayDate("compact") + ".xls");			//UIGod.feedback(outputReporterFile.nativePath);						var selectedKids : Array = getSelectedKids();						if(selectedKids.length == 0)				excelreporter.generate();			else 				excelreporter.generate(selectedKids);		}				public function openExcelInfo(e : Event)		{			KpmIO.openFile(DriverData.FOLDER_REPORTS + "Info//ExcelReportInfo.docx", "documents");		}				function showConfirmDelete(e : Event)		{			if(getSelectedKids().length == 1)			{				addChild(tConfirmDelete_Page);				tConfirmDelete_Page.visible = true;			}			else				UIGod.feedback("Need to select one kid!");					}				function cancelDeleteKid(e : Event)		{			tConfirmDelete_Page.visible = false;		}				function doDeleteKid(pEvent : Event = null)		{			tConfirmDelete_Page.visible = false;			DriverData.getInstance().moveKidToTrash(getSelectedKids()[0], deleteKidSuccessfully);		}		//TEST		function deleteKidSuccessfully(e : Event)		{			showPage();			}	}}