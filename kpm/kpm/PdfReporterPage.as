package com.kpm.kpm{	import com.kpm.common.KpmIO;	import com.kpm.common.MovieList;	import com.kpm.common.Point2D;	import com.kpm.common.Util;	import com.kpm.reporter.pdf.AtomsList;	import com.kpm.reporter.pdf.DefaultPdf;	import com.kpm.reporter.pdf.PDFReporter;	import com.kpm.ui.UIConst;	import com.kpm.ui.UIGod;	import com.kpm.ui.UIPage;		import fl.controls.RadioButtonGroup;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.filesystem.File;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.navigateToURL;import flash.system.Capabilities;import flash.text.TextFormat;				public class PdfReporterPage extends UIPage	{		var myradioGroup:RadioButtonGroup;		var myradioGroup2:RadioButtonGroup;  		var currentOrgs : Array = new Array();		var selectedAge : String;		var reportName : String;				var pdfReportXML : XML;		var kidFile : KpmIO;		var kidXML : XML;		var currentKid : com.kpm.kpm.Kid;				var atoms : AtomsList;		var reportString : String;		var allOrgs : Array;		var selectedOrgs : Array;		var mergedPdfDocument : DefaultPdf;		//MR :		var currentKidId : int = 0;				var orgList : MovieList		var orgCodes : XML;		var orgCodesLoader : URLLoader		var orgXMLList : XMLList;												public var qq1 : Array;		public var qq2 : Array;		public var qq : Array;				public var imageNames : Array;		public var ql : Array;				var pdfReporter : PDFReporter;        var generatingReport : Boolean = false;				public function PdfReporterPage()		{			super(UIConst.PdfReporterPage);		}				public override function showPage(e : Event = null)				{						if(!inited)			{				initAtoms();								tTeacherName.text = DriverData.configXML.teacherName;												loadOrgCodes();								generateReport_Bt.addEventListener(MouseEvent.CLICK, generateReport);				doChangeName_Bt.addEventListener(MouseEvent.CLICK, doChangeName);				openReferenceSheet_Bt.addEventListener(MouseEvent.CLICK, openRefSheet);								myradioGroup = new RadioButtonGroup("Group 1");												rb_1.group= myradioGroup;				rb_2.group= myradioGroup;				rb_3.group= myradioGroup;				var tf : TextFormat = new TextFormat();				tf.color = 0x660066; 				tf.font = "GROBOLD"; 				tf.size = 18; 				rb_1.setStyle("textFormat", tf);				rb_2.setStyle("textFormat", tf);				rb_3.setStyle("textFormat", tf);												myradioGroup2 = new RadioButtonGroup("Group 2");								rb_type1.group= myradioGroup2;				rb_type2.group= myradioGroup2;								rb_type1.setStyle("textFormat", tf);				rb_type2.setStyle("textFormat", tf);								rb_type1.addEventListener(MouseEvent.CLICK, onTeacherReport_Click)				rb_type2.addEventListener(MouseEvent.CLICK, onFamilyReport_Click)								rb_type1.width				 = 200;				rb_type2.width				 = 200;				rb_type1.textField.width     = 200;				rb_type2.textField.width     = 200;												var ages : Array = ["Pre-k", "k", "1st"];												inited = true;				onFamilyReport_Click(null);							}									super.showPage();					}				public function initAtoms()		{			this.atoms = new AtomsList();			this.atoms.addAtom("imagePath", "data/images/reportImages/");	//Path de las imágenes que se utilizan en las Qualifier Lines.			this.atoms.addAtom("orgCodesPath", "data/OrgCodes.xml");	//Path del archivo XML que contiene los OrgCodes.			this.atoms.addAtom("reportData", "data/config.xml");	//Path del archivo XML que contiene datos necesarios como teacherName.			this.atoms.addAtom("isTeacherReport", false);					}			//Creates object for PdfReporter		public function loadPDFReport(pReportType : String)		{			reportName = pReportType;						//MR: put these 2 lines in showPage()			var reportFile : File = File.documentsDirectory.resolvePath(DriverData.FOLDER_REPORTS + "StudentReports");			pdfReporter = new PDFReporter("data/" + reportName + "Report.xml", reportFile.nativePath);			//MR: Replace with : 			//MR : pdfReporter.addToAllReport(currentKidId);		}			function loadOrgCodes():void{									orgList = new MovieList(true, 16);			var request : URLRequest = new URLRequest("data/OrgCodes.xml");			orgCodesLoader = new URLLoader();			orgCodesLoader.load(request);			orgCodesLoader.addEventListener(Event.COMPLETE, loadOrgs);		}						function loadOrgs(e:Event):void{			orgCodes = new XML(e.target.data);			trace("org codes loaded");						orgXMLList = orgCodes.organization;						var org_mc : KpmOrg_mc; 						for each(var org : XML in orgXMLList)			{				org_mc = new KpmOrg_mc();				org_mc.id = org.@name;				org_mc.org.text = org.@name + " " + org.@description;				org_mc.addEventListener(MouseEvent.CLICK, onOrgClick);				org_mc.buttonMode = true;				orgList.add(org_mc);			}									addChild(orgList);			orgList.visible = false;			orgList.x = 500;			orgList.y = 250;										//Util.debug(orgXMLList.toXMLString());		}				function onOrgClick(e : Event)		{			Util.debug("ClassPage.Org Click" + e.currentTarget.id);			if(e.currentTarget.currentFrame == 1)				e.currentTarget.gotoAndPlay(2);			else if(e.currentTarget.currentFrame == 2)				e.currentTarget.gotoAndPlay(1);			}				function onFamilyReport_Click (e : Event)		{			SelectOrg_Tf.alpha = 0;			orgList.visible = false;			SelectAge_Tf.alpha = 0;			rb_1.visible = rb_2.visible = rb_3.visible = false;			loadPDFReport("family");		}				function onTeacherReport_Click (e : Event)		{			SelectOrg_Tf.alpha = 100;			orgList.visible = true;			SelectAge_Tf.alpha = 100;			rb_1.visible = rb_2.visible = rb_3.visible = true;			loadPDFReport("teacher");		}								public function generateReport(e : Event)		{			if(DriverData.configXML.teacherName == "" || DriverData.configXML.teacherName == "Teacher Name")			{				UIGod.feedback("Choose a name for the teacher");				return;			}            //If there is another report open            if(generatingReport || UIGod.webviews.count > 0)                return ;            trace("tEmail.text" + tEmail.text)            if(tEmail.text != "")                if(tEmail.text.indexOf("@") == -1 || tEmail.text.indexOf(".") == -1)                {                    UIGod.feedback("enter a valid email address " + tEmail.text)                    return;                }                generatingReport = true;            Util.debug("ClassPage.onGenerateReportClick" + generatingReport);            UIGod.feedback("Generating Report . . .. ... ..... ........ ............. .....................")            //Add selected Orgs			selectedOrgs = new Array();			selectedAge = "Pre-K";						for each (var mc : MovieClip in orgList.Rows)			{				if(mc.currentFrame == 2)					selectedOrgs.push(mc.id);			}						// Add selected Age			switch (myradioGroup.selection) {		       case rb_1 :		           selectedAge = "Pre-K";		           break;		       case rb_2 :		           selectedAge = "K";		           break;		       case rb_3 :		           selectedAge = "1st";		           break;		   }		   		   switch (myradioGroup2.selection) {		       case rb_type1 :		           atoms.addAtom("isTeacherReport", true);				           break;		       case rb_type2 :		           atoms.addAtom("isTeacherReport", false);				           break;		          		       default : 		       	   Util.debug("no radio button");		       	   break;		       			   }						Util.debug("making report with following data : ")			Util.debug("selected orgs");			Util.printArray(selectedOrgs);			Util.debug("selected Age " + selectedAge)					atoms.addAtom("currentOrgs", selectedOrgs);			atoms.addAtom("currentAge", selectedAge);            atoms.addAtom("emailToSendReport", tEmail.text);            //TODO change static id to id given by user			//MR :add event listener for KidReportCreated			pdfReporter.addEventListener("reportGenerated", addOneMoreReport);			if(container.pages[UIConst.ClassPage].getSelectedKids().length > 4)				UIGod.feedback("Generating combined reports ... This will take several minutes, depending on how many reports are generated (around 20 seconds per player). If report is not generated, restart KidsPlayMath");						addOneMoreReport();		}						//MR : function to create another report		public function addOneMoreReport(e : Event = null)		{			var selectedKids : Array = container.pages[UIConst.ClassPage].getSelectedKids();			Util.debug("PdfReporterPage.addOneMoreReport" + selectedKids.length + " " + this.currentKidId);			Util.printArray(selectedKids);						if(selectedKids.length <= this.currentKidId)			{					pdfReporter.removeEventListener("reportGenerated", addOneMoreReport);				pdfReporter.saveMergeReport();				Util.debug("Generating report(s)");				UIGod.feedback("Generating Report(s)");                generatingReport = false;				this.currentKidId = 0;			}			else			{				populateKidprofile(selectedKids[this.currentKidId++]);			}							}				public function openRefSheet(e: Event)		{			var pdfStdFile : String;			selectedOrgs = new Array();						for each (var mc : MovieClip in orgList.Rows)			{				if(mc.currentFrame == 2)					selectedOrgs.push(mc.id);												}									for (var i=0; i< selectedOrgs.length; i++)			{				if(selectedOrgs[i] == "CA")					selectedOrgs[i] = "CAPLF";											pdfStdFile = "KidsPlayMath/Reports/Standards/" + selectedOrgs[i] + ".pdf"				Util.debug("opening " + pdfStdFile);				KpmIO.openFile(pdfStdFile , "documents");							}												  		}				public function doChangeName(e : Event) : Boolean		{			UIGod.debug("Tutorial.doChangeName!");						if(tTeacherName.text == "")			{				UIGod.feedback("Name cannot be empty");				tTeacherName.text = DriverData.configXML.teacherName; 				return false;			}						DriverData.configXML.teacherName = tTeacherName.text;			DriverData.configFile.write(DriverData.configXML);						UIGod.feedback("Name successfully changed");            return true;					}						//PopulateKidProfile, Loads xml profile for one kid    	    	public function populateKidprofile(pKidId : String)    	{    		kidFile = new KpmIO();    		kidFile.setFilePath(DriverData.getKidFolder(pKidId) + "_profile.xml");    		if(kidFile.exists())			{				kidFile.addEventListener(KpmIO.READ_COMPLETE, populateKidProfileFromXML);				kidFile.addEventListener(KpmIO.READ_ERROR, populateKidProfileFromXML);				kidFile.read();			}			else			{				trace("kid does not exist, cannot access profile");			}    		    	}    			//saves kidXML and starts the computation of the qq and ql		function populateKidProfileFromXML(e : Event)		{	//			var initialBubblesPath : String = DriverData.FOLDER_XML + "initialBubbles.xml";			//currentKidXML = new XML(e.target.data);			if(e.type == KpmIO.READ_COMPLETE)			{				kidXML = XML(kidFile.readContents);				currentKid = Kid.makeKidFromXML(kidXML, false);				Util.debug("kid was made");                pdfReporter.setKidName(currentKid.firstName + " " + currentKid.lastName);				computeAchievements();			}				else if(e.type == KpmIO.READ_ERROR)			{				DriverData.logTool.reportError("error could not read profile file" , false);			}		}				public function computeAchievements()	   	{			if(!currentKid)			{				UIGod.feedback("PdfReporterPage : no current kid");				return;			}				//			if(!("BUBBLE_STATUS" in kidXML && kidXML.BUBBLE_STATUS.BUBBLE.length() > 0))//			{//				UIGod.feedback("Player " + kidXML.FIRST_NAME + " " + kidXML.LAST_NAME + " has not played any activities yet!");//				if(container.pages[UIConst.ClassPage].getSelectedKids().length > 1)//					pdfReporter.dispatchEvent(new Event("reportGenerated"));//				else//					return;//			}							ql = [EBName.IdentifyFinger, EBName.Identify5Frame, EBName.IdentifyDiceDots, EBName.IdentifyNumeral, EBName.IdentifyShape, EBName.MatchShape, 			EBName.IdentifyColor, EBName.IdentifySize]						qq1 = new Array(ql.length*2);			qq2 = new Array(ql.length*2);						computeHighestLevel();	   		assignQQCount();	   			   		for each (var bName : EBName in ql) 	   			assignQQ(bName);	   							   		atoms.addAtom("kidFirstName", kidXML.FIRST_NAME);			atoms.addAtom("kidLastName", kidXML.LAST_NAME);			atoms.addAtom("todayDate", Util.getTodayDate("compact"));			atoms.addAtom("qq1", qq1);			atoms.addAtom("qq2", qq2);			atoms.addAtom("teacherName", DriverData.configXML.teacherName);			var className : String = DriverData.configXML.classes.children().(@id == DriverData.configXML.classes.@currentId)[0].@name + "_";						if(className = "Default_")				className = "Report_";						atoms.addAtom("class", className);						Util.debug("setting current class name" + atoms.getObject("class"));							pdfReporter.setReportData(atoms);						//merge pdf if the number of kids selected is bigger than 4			Util.debug("PdfReportPage.computeAchievement");			Util.debug("generating for kid " + kidXML.FIRST_NAME + " " + kidXML.LAST_NAME + " with number of kids " + container.pages[UIConst.ClassPage].getSelectedKids().length);			var mergeReport : Boolean = container.pages[UIConst.ClassPage].getSelectedKids().length > 4 || ((Capabilities.manufacturer.indexOf("iOS") != -1) && container.pages[UIConst.ClassPage].getSelectedKids().length > 1);			//pdfReporter.generate(mergeReport, !mergeReport);            pdfReporter.generate(mergeReport, !mergeReport);            Util.debug("caling pdfReporter.generate" + mergeReport + " " + !mergeReport + " " + container.pages[UIConst.ClassPage].getSelectedKids());	   			   	}	   		   	public function computeHighestLevel()	   	{	   		var qq1Assigned : Boolean ;	   		var qq2Assigned : Boolean ;	   			   		Util.debug("compute highes level");	   			   		for each (var bName : EBName in ql)	   		{				var index : String;				qq1Assigned = qq2Assigned = false;					   			for(var j= bName.MaxLevel; j>= bName.MinLevel; j--)	   			{	   				index = bName.Text + "_" + j;	   					   				if(currentKid.bubblePassed(index) && !qq1Assigned)	   				{	   					qq1[bName.Text] = j;	   					qq1Assigned = true;	   						   							   				}	   					   				if((currentKid.BubbleActive[index] || currentKid.bubblePassed(index)) && !qq2Assigned)	   				{	   					qq2[bName.Text] = j;	   					qq2Assigned = true;	   				}	   				   			}					//				if(!qq1Assigned)//					qq1[bName.Text] = 0;//				if(!qq2Assigned)//					qq2[bName.Text] = 0;	   				   			Util.debug("qq1 for " + index + " " + qq1[bName.Text]);	   			Util.debug("qq2 for " + index + " " + qq2[bName.Text]);	   		}	   	}	   				public function assignQQCount()	   	{		   		var qq1Assigned : Boolean ;	   		var qq2Assigned : Boolean ;			var index1, index2: String;	   			   		//Levels loop	   		for(var i= 1; i <= 4; i++)	   		{	   			qq2["CountLev"+i] = 0;	   			qq1Assigned = qq2Assigned = false;	   				   			//inner loop	   			for(var j=5; j>= 0; j--)	   			{	   				index1 = "Count5Frame" + "_" + EBName.numbers[j+1] + "_" + i;	   				index2 = "CountNumeral" + "_" + EBName.numbers[j+1] + "_" + i;	   					   				Util.debug("count qq1 " + index1 + " " + (currentKid.BubbleStatus[index1]));	   				 	   				if((currentKid.bubblePassed(index1) || currentKid.bubblePassed(index2))	   				   && !qq1Assigned)	   				{	   						   					qq1["CountLev"+ i] = EBName.numbers[j+1];	   					qq1Assigned = true;	   				}	   					   				Util.debug("count qq2 " + index1 + " " + (currentKid.BubbleActive[index1]));	   				if((currentKid.BubbleActive[index1] || currentKid.bubblePassed(index1) || currentKid.BubbleActive[index2] || currentKid.bubblePassed(index2))	   				   && !qq2Assigned)	   				{	   					qq2["CountLev"+ i] = EBName.numbers[j+1];	   					qq2Assigned = true;	   				}	   			}	   				   				   			//Remove part 2 if family report	   			if(reportName == "family")		   			qq2["CountLev"+ i] = -2;		   					   		//if(qq1["CountLev"+ i] == EBName.numbers[4] && qq2["CountLev" + i] == )		   		//	qq2["CountLev"+ i] = -1;		   				   			Util.debug("qq1 " + "CountLev"+ i + "  : " + qq1["CountLev"+ i]);	   			Util.debug("qq2 " + "CountLev"+ i + " : " + qq2["CountLev"+ i]);	   		}	   			   			   	}	   		   	public function assignQQ(bName : EBName)	   	{	   		var qq : String;	   		var highestPassed : Boolean = false;	   			   		//if highest passed level is highest level, 	   		if(qq1[bName.Text] == bName.MaxLevel)	   			highestPassed = true;	   			   		if (bName.Standard == EBStd.Geometry && qq1[bName.Text] >= bName.MaxLevel-1)	   		{	   			highestPassed = true;	   			qq1[bName.Text] = bName.MaxLevel- 1;	   		}	   		   			switch (bName)	   		{	   			case EBName.IdentifyFinger :	   			case EBName.Identify5Frame :	   			case EBName.IdentifyDiceDots :	   			case EBName.IdentifyNumeral :	   				qq1[bName.Text] = EBName.numbers[qq1[bName.Text]];	   				qq2[bName.Text] = EBName.numbers[qq2[bName.Text]];	   				break;	   				   			case EBName.IdentifyShape:	   				qq1[bName.Text] = EBName.shapes[qq1[bName.Text]];	   				qq2[bName.Text] = EBName.shapes[qq2[bName.Text]];	   				break;	   				   			case EBName.MatchShape : 	   				qq1[bName.Text] = EBName.matchShapes[qq1[bName.Text]];	   				qq2[bName.Text] = -2;	   				break;	   				   			case EBName.IdentifyColor :	   				if(highestPassed)	   					qq1[bName.Text] = EBName.colors;	   				else	   					qq1[bName.Text] = -1;	   						   				qq2[bName.Text] = EBName.colors; 	   				break;	   				   			case EBName.IdentifySize :	   				if(highestPassed)	   					qq1[bName.Text] = "";	   				else	   					qq1[bName.Text] = -1;	   				qq2[bName.Text] = EBName.sizes;	   				break; 		   				   		}		   			   	//Remove part 2 if family report		   	if(highestPassed)		   		qq2[bName.Text] = -1;		   	if(reportName == "family")		   		qq2[bName.Text] = -2;	   			   		Util.debug(bName.Text + " part1  : " +  qq1[bName.Text] + " part2 " + qq2[bName.Text]);	   	}	}}