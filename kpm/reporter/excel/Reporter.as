package com.kpm.reporter.excel{	import flash.events.Event;	import flash.filesystem.*;	import flash.utils.ByteArray;	import com.kpm.common.Util;		/**	 *Clase para procesar los profiles de los niños. 	 */		public class Reporter	{		private var inputParser: InputParser;		private var outPutParser: Output;		private var fileOut:String;		private var outputPath:String;		private var kid:Kid;		private var workspace;		private var output:Output;				/**		 * Constructor de la clase.		 * @param workspace		 Path que contiene el directorio de cada niño a procesar		 * @param filePathOut    Path en donde se desea crear el archivo de salida.		 * @param fileOut        Nombre del archivo de salida. Por default: Report.xml		 * 		 * Modo de uso:		 *		 * import com.kpm.reporter.Reporter;		 * var rep:Reporter = new Reporter("Kids\\Profiles\\Path", "Output\\Path", "OutputFileName.xml");		 * rep.generate();		 *		 */				public function Reporter(workspace:String, filePathOut:String, fileOut:String="Report.xml")		{			inputParser = new InputParser(workspace);			this.outputPath = filePathOut;			this.fileOut = fileOut;			this.output = null;			inputParser.addEventListener("kidLoaded", parseKid);			inputParser.addEventListener("endOfParsing", export);		}						/**		 *Método para generar el reporte según los parámetros 		 *definidos en el constructor.		 * 		 */		public function generate(kidsID:Array = null):void{			try{				inputParser.loadDir(kidsID);				inputParser.loadNextKid();			}			catch(e:Error){				Util.debug(e.message.toString(), this);			}		}				//Recorre las burbujas correspondientes al niño actual.		private function parseKid(e:Event):void{					if(this.output==null) output = new Output(this.inputParser.getLongestIdLength());			kid = inputParser.getKid();							output.addNameToAllCategories(kid.firstName() + " " + kid.lastName(),kid.uid());						while(kid.hasNextBubble()){				output.updateKidStatus(kid.firstName() + " " + kid.lastName(),kid.uid(), kid.bubbleId(), kid.bubbleStatus() + "/" + kid.bubbleActive());			}			Util.debug("Profile " + kid.uid() + " procesado", this);						inputParser.loadNextKid();		}				//Vuelca la salida en el archivo de salida especificado en el constructor.		private function export(e:Event):void{			try{							output.export(this.fileOut,this.outputPath);					}			catch(e:Error){				Util.debug(e.message.toString(), this);			}		}			}}