package com.kpm.reporter.excel{		import flash.xml.XMLDocument;		/**	 * Clase que manipula la información correspondiente al profile de un determinado niño.	 * 	 */	public class Kid{				private var KID:XML;		private var bubbleList:XMLList;		private var bubbleIndex:int = -1;				/**		 * Constructor de la clase. 		 * @param xml	XML correspondiente al profile del niño.		 * @author 		Manera, Torres, Vainstein		 **/		public function Kid(xml:XML){			KID = xml;			KID.ignoreWhitespaces = true;			KID.ignoreComments = true;			if (KID.hasOwnProperty("BUBBLE_STATUS") && KID.BUBBLE_STATUS.hasOwnProperty("BUBBLE")){				bubbleList = KID.BUBBLE_STATUS.BUBBLE;				//bubbleList = KID.child(8)[0].children();			}			else{				bubbleList = new XMLList();			}						}				/**		 * Método que retorna el ID del niño. 		 *		 **/		public function uid():String{            //if(KID.hasOwnProperty("UniqueRandomID"))            //    return KID.UniqueRandomID[0];			if (KID.hasOwnProperty("UID"))				return KID.UID[0];			else				return "Undefined";					}				/**		 * Método que retorna el nombre del niño. 		 *		 **/		public function firstName():String{			if (KID.hasOwnProperty("FIRST_NAME"))				return KID.FIRST_NAME[0];			else				return "Undefined";					}				/**		 * Método que retorna el apellido del niño. 		 *		 **/		public function lastName():String{			if (KID.hasOwnProperty("LAST_NAME"))				return KID.LAST_NAME[0];			else				return "Undefined";					}				/**		 * Método que determina si restan burbujas por procesar en el profile del ni�o. 		 * En caso afirmativo la burbuja actual es actualizada.		 *		 **/		public function hasNextBubble():Boolean{			bubbleIndex++;			return bubbleIndex < bubbleList.length();		}				/**		 * Método que retorna el ID de la burbuja actual. 		 *		 **/		public function bubbleId():String{			//return bubbleList[bubbleIndex].child(0)[0].toString();			if (bubbleList[bubbleIndex].hasOwnProperty("BUBBLE_ID"))				return bubbleList[bubbleIndex].BUBBLE_ID[0];			else				return "Undefined";				}				/**		 * Método que retorna el Status del niño con respecto a la burbuja actual. 		 *		 **/		public function bubbleStatus():String{			if (bubbleList[bubbleIndex].hasOwnProperty("STATUS")){				return bubbleList[bubbleIndex].STATUS[0];			}			else				return "Undefined";			}				/**		 * Método que retorna el estado activo/inactivo del niño con respecto a la burbuja actual. 		 *		 **/		public function bubbleActive():String{			var active:String;			if (bubbleList[bubbleIndex].hasOwnProperty("ACTIVE"))				active = bubbleList[bubbleIndex].ACTIVE[0].toString().toLowerCase();			else				return "Undefined";						if(active == "true")				return "Active";			else				if(active == "false")					return "Inactive";				else					return "Undefined";					}				/**		 * Método que retorna el número de intentos realizados por el niño con respecto a la burbuja actual. 		 *		 **/		public function bubbleAttempts():String{			if (bubbleList[bubbleIndex].hasOwnProperty("NUM_ATTEMPTS"))				return bubbleList[bubbleIndex].NUM_ATTEMPTS[0];			else				return "Undefined";			}				/**		 * Método que retorna el String correspondiente a la estructura XML que representa el profile del ni�o.		 *		 **/		public function toString():String{			return KID.toXMLString();		}			}}