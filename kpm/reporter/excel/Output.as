package com.kpm.reporter.excel{	import com.kpm.common.Util;		import flash.filesystem.*;	import flash.utils.ByteArray;	import flash.xml.XMLDocument;	import com.kpm.kpm.EBName;				/**	 * Clase encargada de manipular la información que será parte del archivo de salida. 	 * 	 */		public class Output{				private var Workbook:XML;		private var categories:Array;		private var gameData:HashGameCategory;		private var firstColumnLength:int;		private const pointsPerCharacter:int = 7;		private var longestIdLength:int;				/**		 * Constructor de la clase. 		 * Se encarga de darle el formato inicial al archivo de salida. 		 * @author 	Manera, Torres, Vainstein		 *		 **/		public function Output(longestIdLength:int){			this.longestIdLength = (longestIdLength == 1) ? 2 : longestIdLength ;			gameData = new HashGameCategory();			categories = gameData.getCategories();			firstColumnLength = 12; //Kids/Bubbles						var defaultBorder:XML =	<Borders>										<Border Position="Bottom" LineStyle="Continuous" Weight="1"/>										<Border Position="Left" LineStyle="Continuous" Weight="1"/>										<Border Position="Right" LineStyle="Continuous" Weight="1"/>										<Border Position="Top" LineStyle="Continuous" Weight="1"/>									</Borders>;												var heavyBorder:XML =	<Borders>										<Border Position="Bottom" LineStyle="Continuous" Weight="3"/>										<Border Position="Left" LineStyle="Continuous" Weight="3"/>										<Border Position="Right" LineStyle="Continuous" Weight="3"/>										<Border Position="Top" LineStyle="Continuous" Weight="3"/>									</Borders>;			var noBorder:XML =	<Borders>										<Border Position="Bottom" LineStyle="None" Weight="0"/>										<Border Position="Left" LineStyle="None" Weight="0"/>										<Border Position="Right" LineStyle="None" Weight="0"/>										<Border Position="Top" LineStyle="None" Weight="0"/>									</Borders>;												Workbook = new XML();			Workbook =	<Workbook>							<DocumentProperties xmlns="urn:schemas-microsoft-com:office:office">								<Author></Author>							  	<Created></Created>						  								  	<Version></Version>						 	</DocumentProperties>							<OfficeDocumentSettings xmlns="urn:schemas-microsoft-com:office:office">	  							<AllowPNG/>	 						</OfficeDocumentSettings>						 	<ExcelWorkbook xmlns="urn:schemas-microsoft-com:office:excel">								<WindowHeight>11760</WindowHeight>								<WindowWidth>20730</WindowWidth>								<WindowTopX>795</WindowTopX>								<WindowTopY>-420</WindowTopY>								<ProtectStructure>False</ProtectStructure>								<ProtectWindows>False</ProtectWindows>						 	</ExcelWorkbook>							<Styles>						  		<Style ID="Default" Name="Normal">									<Alignment Vertical="Bottom"/>									<Borders/>									<Font FontName="Verdana"/>									<Interior/>									<NumberFormat/>									<Protection/>								</Style>																<Style ID="KidsColumn">									{defaultBorder}								</Style>																//1) "NotPlayed/Active", Background default (blanco), borde negro grueso.								<Style ID="NotPlayed/Active">   									{heavyBorder}  								</Style>																//2) "NotPlayed/Inactive", Background default (blanco), sin borde.								<Style ID="NotPlayed/Inactive">   									{defaultBorder}  								</Style>																//3) "Passed/Inactive", Background verde.								<Style ID="Passed/Inactive">   									{defaultBorder}   									<Interior Color="#1FB714" Pattern="Solid"/>  								</Style>  								  								<Style ID="PassedRedo/Inactive">   									{defaultBorder}   									<Interior Color="#1FB714" Pattern="Solid"/>  								</Style>																//4) "Failed/Inactive", Background Rojo.  								<Style ID="Failed/Inactive">   									{defaultBorder}  									<Interior Color="#DD2D32" Pattern="Solid"/>  								</Style>  								  								//4) "Failed/Inactive", Background Rojo.  								<Style ID="Failed/Active">   									{heavyBorder}  									<Interior Color="#DD2D32" Pattern="Solid"/>  								</Style>																//5) "Passed/Active", Background verde, borde negro grueso.								<Style ID="Passed/Active">   									{heavyBorder}   									<Interior Color="#1FB714" Pattern="Solid"/>  								</Style>  								  								//5) "Passed/Active", Background verde, borde negro grueso.								<Style ID="PassedRedo/Active">   									{heavyBorder}   									<Interior Color="#1FB714" Pattern="Solid"/>  								</Style>																								//6) Enjoy/Active", Background amarillo, borde negro grueso.								<Style ID="Enjoy/Active">   									{heavyBorder}   									<Interior Color="#FCF305" Pattern="Solid"/>  								</Style>								  								//7) Enjoy/Inactive,  Background amarillo.[SOLO POR COMPLETITUD]								<Style ID="Enjoy/Inactive">   									{defaultBorder}   									<Interior Color="#FCF305" Pattern="Solid"/>  								</Style>																//8) NotComplete/Inactive, Background default (blanco).								<Style ID="NotComplete/Inactive">   									{defaultBorder}   									<Interior Color="#1FB714" Pattern="Solid"/> 							 	</Style>																//9) NotComplete/Active, , borde negro grueso.								<Style ID="NotComplete/Active">   									{heavyBorder}   									<Interior Color="#1FB714" Pattern="Solid"/> 							 	</Style> 							 	 							 	//8) NotComplete/Inactive, Background default (blanco).								<Style ID="ForceRedo/Inactive">   									{noBorder} 							 	</Style>																//9) NotComplete/Active, , borde negro grueso.								<Style ID="ForceRedo/Active">   									{heavyBorder} 							 	</Style>								  								<Style ID="defaultBubbleCell">   									{noBorder} 							 	</Style>								<Style ID="verticalCell">									{defaultBorder}   									<Alignment Vertical="Bottom" Rotate="90"/>  								</Style>							</Styles>														</Workbook>;							this.setup();		}										//Genera los worksheets y las columnas correspondientes a cada burbuja.		private function setup():void{			var row:XML;			var bubbles:Array;												Workbook.appendChild((new Legend()).legend);			for each (var category:String in categories){								bubbles = gameData.getBubbles(category);								Workbook.appendChild(<Worksheet Name={category}>									<Table ExpandedColumnCount={bubbles.length + 2} ExpandedRowCount="1" FullColumns="1"   										FullRows="1" DefaultColumnWidth="14">   																			</Table>									<WorksheetOptions xmlns="urn:schemas-microsoft-com:office:excel">										<PageSetup>											<Layout Orientation="Landscape"/>											<PageMargins Bottom="0.5"/>										</PageSetup>								   		<Print>										    <ValidPrinterInfo/>										    <HorizontalResolution>-4</HorizontalResolution>										    <VerticalResolution>-4</VerticalResolution>								   		</Print>								   		<Selected/>								   		<Panes>								    		<Pane>								     			<Number>3</Number>								     			<ActiveRow>0</ActiveRow>								     			<ActiveCol>0</ActiveCol>								    		</Pane>								   		</Panes>								   		<ProtectObjects>False</ProtectObjects>								   		<ProtectScenarios>False</ProtectScenarios>								   		<ShowPageLayoutZoom/>								   		<PageLayoutZoom>100</PageLayoutZoom>								  	</WorksheetOptions>								</Worksheet>);								row =	<Row >							<Cell StyleID="KidsColumn"><Data Type="String">Id</Data></Cell>							<Cell StyleID="KidsColumn"><Data Type="String">Kid</Data></Cell>						</Row>;												bubbles = bubbles.sort(compare);				for each (var bubble:String in bubbles){					//row.appendChild(<Cell StyleID="verticalCell"><Data Type="String">{bubble}</Data></Cell>);					row.appendChild(<Cell StyleID="verticalCell"><Data Type="String">{EBName.getFriendlyName(bubble)}</Data></Cell>);				} 								Util.debug("appending " + row);								Workbook.Worksheet.(@Name == category).Table.appendChild(row);							}					}				function addNameToAllCategories(kidName : String, kidId : String)		{			var row:XML;			var bubbles:Array ; 									kidId = kidId.substr(kidId.length - this.longestIdLength);									for each (var category:String in categories){				bubbles = gameData.getBubbles(category);				row =	<Row>							<Cell StyleID="KidsColumn"><Data Type="String">{kidId}</Data></Cell>							<Cell StyleID="KidsColumn"><Data Type="String">{kidName}</Data></Cell>						</Row>;				if(kidName.length > firstColumnLength) firstColumnLength = kidName.length;								for each (var bubb:String in bubbles){					row.appendChild(<Cell StyleID="defaultBubbleCell"><Data Type="String"></Data></Cell>);				} 																Workbook.Worksheet.(@Name == category).Table.appendChild(row);			}		}				/**		 * Método utilizado para actualizar el estado de un niño para una dada burbuja.		 * @param kid		String que identifica al niño con el siguiente formato: nombre - id.		 * @param bubble 	String que representa la burbuja que será actualizada.		 * @param status	String que representa el estado del niño para la burbuja dada.		 * 		 **/		public function updateKidStatus(kidName:String,kidId:String, bubble:String, status:String):void{			var category:String = gameData.getCategory(bubble);						Util.debug("updateKidStatus " + kidName + " " + category + " " + kidId + " " + bubble + " " + status);			//Si la categoría es vacía entonces la burbuja es alguna de las que no se quiere incluir en el informe						if(category=="") return;						var rows:XMLList = Workbook.Worksheet.(@Name == category).Table.children();			var bubbleIndex:int = gameData.getBubbles(category).indexOf(bubble);					var bubbles:Array = gameData.getBubbles(category);			var row:XML;			var hasRow:Boolean = false;			var kidIndex:int = 0;			var letter : String;									for each (var Row:XML in rows){				if(Row.Cell[1].Data.contains(kidName)){					hasRow = true;					break;									}				kidIndex++;			}									if (hasRow){				Workbook.Worksheet.(@Name == category).Table.Row[kidIndex].Cell[bubbleIndex + 2].attributes()[0] = status;								if(status.indexOf("NotComplete") != -1)					letter = "N"				else if(status.indexOf("Failed") != -1)					letter = "F";				else if(status.indexOf("Passed") != -1)					letter = "P"				else if(status.indexOf("Enjoy") != -1)					letter = "E";									if(letter)					Workbook.Worksheet.(@Name == category).Table.Row[kidIndex].Cell[bubbleIndex + 2].Data = letter;				//trace(Workbook.Worksheet.(@Name == category).Table.Row[kidIndex].Cell[bubbleIndex + 2].attributes()[0]);			}			else{					kidId = kidId.substr(kidId.length - this.longestIdLength);				row =	<Row>							<Cell StyleID="KidsColumn"><Data Type="String">{kidId}</Data></Cell>							<Cell StyleID="KidsColumn"><Data Type="String">{kidName}</Data></Cell>						</Row>;										if(kidName.length > firstColumnLength) firstColumnLength = kidName.length;				for each (var bubb:String in bubbles){					if(bubb == bubble){						row.appendChild(<Cell StyleID={status}><Data Type="String"></Data></Cell>);																	}					else												row.appendChild(<Cell StyleID="defaultBubbleCell"><Data Type="String"></Data></Cell>);				} 								Workbook.Worksheet.(@Name == category).Table.appendChild(row);			}			}				//Método que establece el número final de filas de cada worksheet de manera que el archivo respete un formato válido.		private function setWorkbookSettings():void{			var worksheets:XMLList = Workbook.Worksheet;			var cantRows:int;			var wsIndex:int = 0;						for each (var ws:XML in worksheets){				cantRows = Workbook.Worksheet[wsIndex].Table.Row.length();							Util.debug("cantidad rows " + cantRows);					Workbook.Worksheet[wsIndex].Table.@ExpandedRowCount = 30;				Workbook.Worksheet[wsIndex].Table.prependChild(<Column Index="2" Width={this.firstColumnLength * this.pointsPerCharacter}/>);				Workbook.Worksheet[wsIndex].Table.prependChild(<Column Index="1" Width={this.longestIdLength * this.pointsPerCharacter + 4}/>);								if(wsIndex > 0 && cantRows <= 26)					Workbook.Worksheet[wsIndex].Table.appendChild((new Legend()).smallLegend);				wsIndex++;			}					} 							/**		 * Método utilizado para dar el formato final al archivo de salida y guardarlo en el directorio especificado.		 * @param outputFileName String que representa el directorio en el cual debe ser almacenado el archivo de salida.		 * 		 **/		public function export(outputFileName:String,outputPath:String):void{			//outputPath = File.applicationDirectory.nativePath + "//" + outputPath;			outputFileName = outputPath + "//" + outputFileName;			var outputDirectory:File = new File(outputPath);									//Se controla si el directorio de salida existe, si no existe se emite excepcion			if(outputDirectory.exists==false) throw new Error("Directorio de salida "+ outputPath+" inexistente.");						this.setWorkbookSettings();					var excelXML:String = "";			var header:String = (					<![CDATA[<?xml version="1.0"?><?mso-application progid="Excel.Sheet"?><Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet" xmlns:html="http://www.w3.org/TR/REC-html40">]]>).toString();						excelXML = Workbook.toXMLString().replace("<Workbook>", header);						var attributes:Array = ["ID", "Name", "Vertical", "FontName", "ExpandedColumnCount", "ExpandedRowCount", "DefaultColumnWidth", "Type","StyleID", "Color", "Pattern", "Position",									"LineStyle","Weight","Rotate","AutoFitWidth","Width","Index"];			var attributes2:Array = ["FullColumns=", "FullRows=", "ShowPageLayoutZoom", "PageLayoutZoom>","Orientation"];									for each (var att:String in attributes){				var patternStr:String = " " + att;				var replacePattern:RegExp = new RegExp(patternStr, "g");				excelXML = excelXML.replace(replacePattern, " ss:" + att);							}						for each (var att2:String in attributes2){				var patternStr2:String = att2;				var replacePattern2:RegExp = new RegExp(patternStr2, "g");				excelXML = excelXML.replace(replacePattern2, "x:" + att2);			}					var byteArray:ByteArray = new ByteArray();			byteArray.writeUTFBytes(excelXML);						var outFile:File = new File(outputFileName);   			var outStream:FileStream = new FileStream();			outStream.open(outFile, FileMode.WRITE);			outStream.writeBytes(byteArray, 0, byteArray.length);			outStream.close();						Util.debug("Archivo de salida generado", this);						//Abrir archivo			outFile.openWithDefaultApplication();					}				/**		 * Método utilizado para retornar la estructura XML manipulada por la clase.		 * 		 **/		public function getXML():XML{			return Workbook;		}				/**		Metodo que ordena las bubble a ser mostradas en el reporte.		**/		function compare(a:String, b:String):int {						var aParts:Array = a.split("_");			var bParts:Array = b.split("_");						if (String(aParts[0]) < String(bParts[0]))				return -1;			if (String(aParts[0]) > String(bParts[0]))				return 1;			if (Number(aParts[1]) < Number(bParts[1]))				return -1;			if (Number(aParts[1]) > Number(bParts[1]))				return 1;			if (Number(aParts[2]) < Number(bParts[2]))				return -1;			if (Number(aParts[2]) > Number(bParts[2]))				return 1;													return 0;		}			}}